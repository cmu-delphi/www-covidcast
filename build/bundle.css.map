{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../MapBox.svelte",
    "../../Options.svelte",
    "../../Time.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import Options from './Options.svelte';\n  import Time from './Time.svelte';\n  import MapBox from './MapBox.svelte';\n  import Graph from './Graph.svelte';\n\n  import { data, sensors, times } from './stores.js';\n\n  const ENDPOINT = 'https://delphi.cmu.edu/epidata/api.php?source=covidcast';\n  const ENDPOINT_META = 'https://delphi.cmu.edu/epidata/api.php?source=covidcast_meta';\n\n  // Fetch data for each sensor and granularity\n  onMount(_ => {\n    fetch(ENDPOINT_META)\n      .then(d => d.json())\n      .then(meta => {\n        console.log(meta);\n        let queries = [];\n        let entries = [];\n        let timeMap = new Map();\n        $sensors.forEach(sens => {\n          let date = meta.epidata.find(d => d.source === sens.id);\n          let minDate = date.min_date.split('-').join('');\n          let maxDate = date.max_date.split('-').join('');\n          timeMap.set(sens.id, [minDate, maxDate]);\n          sens.levels.forEach(l => {\n            let query =\n              ENDPOINT +\n              '&data_source=' +\n              sens.id +\n              '&signal=' +\n              sens.signal +\n              '&geo_type=' +\n              l +\n              '&dates=' +\n              minDate +\n              '-' +\n              maxDate +\n              '&geo_id=*';\n            queries.push(fetch(query).then(d => d.json()));\n            entries.push([sens.id, l]);\n          });\n        });\n        queries.push();\n        let dat = {};\n        Promise.all(queries).then(d => {\n          console.log(d);\n          let metadata = d[d.length - 1];\n          entries.forEach((ent, i) => {\n            dat[ent[0]] ? '' : (dat[ent[0]] = {});\n            dat[ent[0]][ent[1]] = d[i].epidata;\n          });\n          times.set(timeMap);\n          data.set(dat);\n        });\n      });\n  });\n</script>\n\n<style>\n  .options-container {\n    position: fixed;\n    top: 2vh;\n    left: 2vh;\n    z-index: 1000;\n    max-width: 400px;\n    background-color: rgba(255, 255, 255, 0.7);\n    border-radius: 1rem;\n    padding: 10px 15px;\n    box-sizing: border-box;\n\n    transition: all 0.1s ease-in;\n\n    /* background-color: black; */\n    /* border: 1px solid black; */\n  }\n\n  .graph-container {\n    position: fixed;\n    bottom: 2vh;\n    right: 2vh;\n    z-index: 1001;\n    max-width: 400px;\n    background-color: rgba(255, 255, 255, 0.7);\n    border-radius: 1rem;\n    padding: 10px 15px;\n    box-sizing: border-box;\n\n    transition: all 0.1s ease-in;\n  }\n\n  .time-container {\n    position: fixed;\n    bottom: 4vh;\n    left: calc(2vh + 400px);\n    z-index: 1002;\n    background-color: rgba(255, 255, 255, 0.7);\n    border-radius: 1rem;\n    padding: 5px 10px;\n    box-sizing: border-box;\n    width: 500px;\n\n    transition: all 0.1s ease-in;\n  }\n\n  .options-container:hover,\n  .time-container:hover,\n  .graph-container:hover {\n    background-color: rgba(255, 255, 255, 0.9);\n  }\n</style>\n\n<MapBox />\n\n<div class=\"options-container\">\n  <Options />\n</div>\n\n<div class=\"time-container \">\n  <Time />\n</div>\n\n<div class=\"graph-container \">\n  <Graph />\n</div>\n\n<!-- \n<div class=\"pure-g\">\n  <div class=\"pure-u-1 pure-u-md-2-3\">\n    <div class=\"block\">\n      <Options />\n    </div>\n  </div>\n  <div class=\"pure-u-1 pure-u-md-1-3\">\n    <div class=\"block\">\n      <Time />\n    </div>\n  </div>\n</div>\n<div class=\"pure-g\">\n  <div class=\"pure-u-1 pure-u-md-2-3\">\n    <div class=\"block\">\n      <MapBox />\n    </div>\n  </div>\n  <div class=\"pure-u-1 pure-u-md-1-3\">\n    <div class=\"block\">\n      <Graph />\n    </div>\n  </div>\n</div> -->\n",
    "<script>\n  import mapboxgl from 'mapbox-gl';\n  import { levels, selectedRegion, geojsons, currentLevel, currentSensor, currentData, data } from './stores.js';\n\n  const LAT = -1.2;\n  const LON = -0.5;\n  const ZOOM = 4.3; // should be set to 4.4 as default\n\n  let container;\n  let map;\n\n  // Boolean tracking if the map has been initialized.\n  let mounted = false;\n\n  // If it hasn't been initialized and we have geojsons and initial data, create map.\n  $: if (!map && $geojsons.size !== 0 && $currentData.length !== 0) initializeMap();\n\n  // Update the map when sensor or level changes.\n  currentLevel.subscribe(_ => updateMap());\n  currentSensor.subscribe(_ => updateMap());\n  currentData.subscribe(_ => updateMap());\n\n  function updateMap() {\n    if (!mounted) return;\n    console.log('update?', $currentLevel);\n    Object.keys($levels).forEach(l => map.setLayoutProperty(l, 'visibility', 'none'));\n    map.setLayoutProperty($currentLevel, 'visibility', 'visible');\n\n    // TODO: Can currently only draw for county.\n    let mappedVals = new Map();\n    let geoIds = new Set(\n      $currentData.map(d => {\n        mappedVals.set(d.geo_id, d.direction);\n        return d.geo_id;\n      }),\n    );\n\n    let dat = $geojsons.get($currentLevel);\n    dat.features.forEach(d => {\n      let id;\n      if ($currentLevel === 'county') {\n        id = d.properties.GEO_ID.slice(-5);\n      } else if ($currentLevel === 'msa') {\n        id = d.properties.CBSAFP;\n      }\n      if (geoIds.has(id)) {\n        d.properties.val = mappedVals.get(id);\n      } else {\n        d.properties.val = -100;\n      }\n    });\n\n    map.getSource($currentLevel).setData(dat);\n  }\n\n  function initializeMap() {\n    map = new mapboxgl.Map({\n      attributionControl: false,\n      container,\n      style: './maps/mapbox_albers_usa_style.json',\n      center: [LON, LAT],\n      zoom: ZOOM,\n      minZoom: ZOOM,\n      // maxBounds: new mapboxgl.LngLatBounds([-23.25, -14.54], [21.8, 13.4])\n    })\n      .addControl(\n        new mapboxgl.AttributionControl({\n          compact: true,\n        }),\n      )\n      .addControl(new mapboxgl.NavigationControl({ showCompass: false }), 'top-right');\n\n    map.on('load', function() {\n      map.addSource('county-outline', {\n        type: 'geojson',\n        data: $geojsons.get('county'),\n      });\n      map.addSource('state-outline', {\n        type: 'geojson',\n        data: $geojsons.get('state'),\n      });\n      map.addLayer({\n        id: 'state-outline',\n        source: 'state-outline',\n        type: 'fill',\n        paint: {\n          'fill-color': '#f9f9f9',\n          'fill-outline-color': '#e3e3e3',\n        },\n      });\n      map.addLayer({\n        id: 'county-outline',\n        source: 'county-outline',\n        type: 'fill',\n        paint: {\n          'fill-color': '#f9f9f9',\n          'fill-outline-color': '#e0e0e0',\n        },\n      });\n      Object.keys($levels).forEach(name => {\n        let data = $geojsons.get(name);\n        console.log(data);\n        map.addSource(name, {\n          type: 'geojson',\n          data: data,\n        });\n        map.addLayer({\n          id: name,\n          source: name,\n          type: 'fill',\n          layout: { visibility: 'none' },\n          filter: ['!=', 'val', -100],\n          paint: {\n            'fill-color': {\n              property: 'val',\n              stops: [[-1, '#224477'], [0, '#fff'], [1, '#c41230']],\n            },\n            'fill-outline-color': 'black',\n          },\n        });\n        map.on('click', name, function(e) {\n          selectedRegion.set(e.features[0].properties.GEO_ID);\n          console.log(e.features[0].properties);\n          new mapboxgl.Popup()\n            .setLngLat(e.lngLat)\n            .setHTML(e.features[0].properties.NAME + '<br />' + e.features[0].properties.val)\n            .addTo(map);\n        });\n      });\n      // Set all layers to not visible and currentLevel visible.\n      mounted = true;\n      updateMap();\n    });\n  }\n\n  function zoomBack() {\n    map.easeTo({\n      center: [LON, LAT],\n      zoom: ZOOM,\n    });\n  }\n</script>\n\n<style>\n  .map-container {\n    width: 100vw;\n    height: 100vh;\n    position: relative;\n  }\n\n  .state-buttons-holder {\n    position: absolute;\n    top: 81px;\n    right: 9px;\n    z-index: 100;\n  }\n\n  .state-buttons-holder button:focus {\n    outline: none;\n  }\n\n  .state-buttons-holder .pg-button {\n    font-size: 23px;\n    position: relative;\n    width: 29px;\n    height: 29px;\n    color: #3a3a3a;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);\n    padding: 0;\n    box-sizing: content-box;\n    background-color: white;\n    border: 1px solid #d5d5d5;\n    border-radius: 4px;\n    text-align: center;\n    font-family: 'FranklinITCProBold', Helvetica, Arial, sans-serif;\n    line-height: 16px;\n    cursor: pointer;\n    text-decoration: none;\n    user-select: none;\n    transition-delay: 0s;\n    transition-duration: 0.15s;\n    transition-property: background-color;\n    transition-timing-function: ease-in-out;\n  }\n\n  .state-buttons-holder .pg-button:hover {\n    background-color: rgb(213, 213, 213);\n  }\n\n  .state-buttons-holder .pg-button img {\n    width: 90%;\n    /* height: 100%; */\n  }\n</style>\n\n<div bind:this={container} class=\"map-container\">\n  <div class=\"state-buttons-holder\">\n    <button data-state=\"us48\" id=\"bounds-button\" class=\"pg-button bounds-button\" on:click={zoomBack}>\n      <img src=\"./assets/imgs/us48.png\" alt=\"\" />\n    </button>\n  </div>\n</div>\n",
    "<script>\n  import { data, sensors, currentSensor, levels, currentLevel } from './stores.js';\n\n  currentSensor.subscribe(sens =>\n    data ? '' : $data[sens][$currentLevel] ? '' : currentLevel.set($sensors.find(d => d.id === sens).levels[0]),\n  );\n</script>\n\n<style>\n  .pure-u-1 {\n    box-sizing: border-box;\n    padding: 5px;\n  }\n\n  .options,\n  .option {\n    width: 100%;\n  }\n\n  .buttons-group-title {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 5px;\n\n    font-weight: 600;\n    font-size: 1.2rem;\n  }\n\n  .buttons-group {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .buttons-group .button {\n    min-width: 220px;\n    font-size: 1rem;\n    background-color: #fff;\n    border-color: #dbdbdb;\n    border-top-color: transparent;\n    border-width: 1px;\n    color: #363636;\n    cursor: pointer;\n    justify-content: center;\n    padding-bottom: calc(0.5em - 1px);\n    padding-left: 1em;\n    padding-right: 1em;\n    padding-top: calc(0.5em - 1px);\n    text-align: center;\n    /* white-space: nowrap; */\n  }\n\n  .buttons-group .button:first-child {\n    border-top-color: #dbdbdb;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n  }\n\n  .buttons-group .button:first-child {\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n  }\n\n  .buttons-group .button:last-child {\n    border-bottom-left-radius: 4px;\n    border-bottom-right-radius: 4px;\n  }\n\n  .buttons-group .button.selected {\n    background-color: var(--red-alpha);\n    border-color: transparent;\n    color: #fff;\n  }\n\n  .buttons-group .button:focus,\n  .buttons-group .button:active {\n    box-shadow: none !important;\n    outline: none;\n  }\n</style>\n\n<div class=\"options\">\n  <div class=\"option\">\n    <div class=\"buttons-group-title\">Data Source</div>\n    <div class=\"buttons-group\">\n      {#each $sensors as sensor}\n        <button\n          class=\"button {$currentSensor === sensor.id ? 'selected' : null}\"\n          on:click={() => currentSensor.set(sensor.id)}>\n          {sensor.name}\n        </button>\n      {/each}\n    </div>\n  </div>\n\n  <br />\n\n  <div class=\"option\">\n    <div class=\"buttons-group-title\">Geographic Level</div>\n    <div class=\"buttons-group\">\n      {#each $sensors.find(d => d.id === $currentSensor).levels as level}\n        <button class=\"button {$currentLevel === level ? 'selected' : null}\" on:click={() => currentLevel.set(level)}>\n          {$levels[level]}\n        </button>\n      {/each}\n    </div>\n  </div>\n</div>\n\n<!-- <div class=\"options\">\n  <form class=\"pure-form\">\n    <div class=\"pure-g\">\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"sensor\">Select sensor:</label>\n        <select id=\"sensor\" bind:value={$currentSensor}>\n          {#each $sensors as sensor}\n            <option value={sensor.id}>{sensor.name}</option>\n          {/each}\n        </select>\n      </div>\n\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"level\">Select level:</label>\n        <select id=\"level\" bind:value={$currentLevel}>\n          {#each $sensors.find(d => d.id === $currentSensor).levels as level}\n            <option value={level}>{$levels[level]}</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n  </form>\n</div> -->\n",
    "<script>\n  import { currentDate, times, currentSensor } from './stores.js';\n  import * as d3 from 'd3';\n\n  let parseTime = d3.timeParse('%Y%m%d');\n  let formatTime = d3.timeFormat('%B %d, %Y');\n\n  let prettyDate = '';\n  $: prettyDate = formatTime(parseTime(val));\n\n  let val = $currentDate;\n  let min = 0;\n  let max = 1;\n\n  currentDate.subscribe(d => (val = d));\n  times.subscribe(t => (t ? update($currentSensor, t) : ''));\n  currentSensor.subscribe(s => ($times ? update(s, $times) : ''));\n\n  function update(s, t) {\n    min = t.get(s)[0];\n    max = t.get(s)[1];\n    currentDate.set(max);\n  }\n</script>\n\n<style>\n  #time_slider {\n    width: 350px;\n  }\n</style>\n\n<div class=\"time\">\n  <input\n    id=\"time_slider\"\n    type=\"range\"\n    {min}\n    {max}\n    on:mouseup={_ => currentDate.set(val)}\n    class=\"slider\"\n    bind:value={val} />\n  <p>{prettyDate}</p>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}