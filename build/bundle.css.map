{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Graph.svelte",
    "../../Legend.svelte",
    "../../MapBox.svelte",
    "../../Options.svelte",
    "../../Tabs.svelte",
    "../../Time.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import Options from './Options.svelte';\n  import Tabs from './Tabs.svelte';\n  import Time from './Time.svelte';\n  import Legend from './Legend.svelte';\n  import MapBox from './MapBox.svelte';\n  import Graph from './Graph.svelte';\n\n  import {\n    sensors,\n    times,\n    signalType,\n    currentRange,\n    currentSensor,\n    currentDate,\n    currentLevel,\n    currentRegion,\n    regionSliceCache,\n    timeSliceCache,\n    currentData,\n    regionData,\n    metaData,\n    mounted,\n  } from './stores.js';\n\n  import * as d3 from 'd3';\n\n  const ENDPOINT = 'https://delphi.cmu.edu/epidata/api.php?source=covidcast&time_type=day';\n  const ENDPOINT_META = 'https://delphi.cmu.edu/epidata/api.php?source=covidcast_meta';\n\n  let error = null;\n  let changingSensor = false;\n\n  // this is for graph dev purposes\n  let use_real_data = true;\n\n  if (use_real_data === false) {\n    console.log('using fake network requests');\n    onMount(_ => {\n      d3.json('./temp_graph_data/meta_request_results.json').then(meta => {\n        metaStats.set(meta.epidata);\n\n        let queries = [];\n        let entries = [];\n        let timeMap = new Map();\n        $sensors.forEach(sens => {\n          let date = meta.epidata.find(d => d.data_source === sens.id);\n          let minDate = date.min_time;\n          let maxDate = date.max_time;\n          timeMap.set(sens.id, [minDate, maxDate]);\n          sens.levels.forEach(l => {\n            entries.push([sens.id, l]);\n          });\n        });\n\n        // faking queries with d3.json()\n        queries.push(d3.json('./temp_graph_data/fb_survey_cli_county_20200406-20200413.json'));\n        queries.push(d3.json('./temp_graph_data/fb_survey_cli_msa_20200406-20200413.json'));\n        queries.push(d3.json('./temp_graph_data/google-survey_cli_county_20200411-20200416.json'));\n        queries.push(d3.json('./temp_graph_data/quidel_negativeratio_county_20200201-20200409.json'));\n        queries.push(d3.json('./temp_graph_data/quidel_negativeratio_msa_20200201-20200409.json'));\n        queries.push(d3.json('./temp_graph_data/ght_smoothedsearch_msa_20200201-20200412.json'));\n\n        let dat = {};\n        Promise.all(queries).then(d => {\n          console.log(d);\n          entries.forEach((ent, i) => {\n            dat[ent[0]] ? '' : (dat[ent[0]] = {});\n            dat[ent[0]][ent[1]] = d[i].epidata;\n          });\n          times.set(timeMap);\n          data.set(dat);\n        });\n      });\n    }).catch(err => {\n      error = err;\n      currentDataReadyOnMay.set(true);\n    });\n  }\n\n  function updateRegionSliceCache(sensor, level, date) {\n    if (!$mounted) return;\n    console.log(sensor, level, date, $times.get(sensor));\n    if (!$sensors.find(d => d.id === sensor).levels.includes(level)) return;\n    if (date > $times.get(sensor)[1]) return;\n\n    let cacheEntry = $regionSliceCache.get(sensor + level + date);\n    if (!cacheEntry) {\n      let q =\n        ENDPOINT +\n        '&data_source=' +\n        sensor +\n        '&signal=' +\n        $sensors.find(d => d.id === sensor).signal +\n        '&geo_type=' +\n        level +\n        '&time_values=' +\n        date +\n        '&geo_value=*';\n      fetch(q)\n        .then(d => d.json())\n        .then(d => {\n          console.log(q, d);\n          currentData.set(d.epidata);\n          regionSliceCache.update(m => m.set(sensor + level + date, d.epidata));\n        });\n    } else currentData.set(cacheEntry);\n  }\n\n  function updateTimeSliceCache(sensor, level, region) {\n    if (!$mounted) return;\n    if (!region) {\n      regionData.set([]);\n      return;\n    }\n    let cacheEntry = $timeSliceCache.get(sensor + level + region);\n    if (!cacheEntry) {\n      let q =\n        ENDPOINT +\n        '&data_source=' +\n        sensor +\n        '&signal=' +\n        $sensors.find(d => d.id === sensor).signal +\n        '&geo_type=' +\n        level +\n        '&time_values=20100101-20300101' +\n        '&geo_value=' +\n        region;\n      fetch(q)\n        .then(d => d.json())\n        .then(d => {\n          regionData.set(d.epidata);\n          timeSliceCache.update(m => m.set(sensor + level + region, d.epidata));\n        });\n    } else regionData.set(cacheEntry);\n  }\n\n  currentSensor.subscribe(s => {\n    if (!$mounted) return;\n    let l = $currentLevel;\n    if (!$sensors.find(d => d.id === s).levels.includes($currentLevel)) {\n      console.log('update?');\n      l = $sensors.find(d => d.id === s).levels[0];\n      currentLevel.set(l);\n    }\n    console.log('now?');\n    currentDate.set($times.get(s)[1]);\n    // updateRegionSliceCache(s, $currentLevel, $currentDate);\n  });\n\n  currentLevel.subscribe(l => {\n    console.log('level update');\n    updateRegionSliceCache($currentSensor, l, $currentDate);\n  });\n\n  currentDate.subscribe(d => {\n    console.log('date update');\n    updateRegionSliceCache($currentSensor, $currentLevel, d);\n  });\n\n  currentRegion.subscribe(r => updateTimeSliceCache($currentSensor, $currentLevel, r));\n\n  if (use_real_data) {\n    onMount(_ => {\n      fetch(ENDPOINT_META)\n        .then(d => d.json())\n        .then(meta => {\n          metaData.set(meta.epidata);\n          let timeMap = new Map();\n          $sensors.forEach(s => {\n            let matchedMeta = meta.epidata.find(\n              d => d.data_source === s.id && d.signal === s.signal && d.time_type === 'day',\n            );\n            timeMap.set(s.id, [matchedMeta.min_time, matchedMeta.max_time]);\n          });\n          times.set(timeMap);\n          fetch(\n            ENDPOINT +\n              '&data_source=' +\n              $currentSensor +\n              '&signal=' +\n              $sensors.find(d => d.id === $currentSensor).signal +\n              '&geo_type=' +\n              $currentLevel +\n              '&time_values=' +\n              timeMap.get($currentSensor)[1] +\n              '&geo_value=*',\n          )\n            .then(d => d.json())\n            .then(d => {\n              regionSliceCache.update(m =>\n                m.set($currentSensor + $currentLevel + timeMap.get($currentSensor)[1], d.epidata),\n              );\n              currentData.set(d.epidata);\n              mounted.set(1);\n            });\n        });\n    });\n  }\n</script>\n\n<style>\n  .options-container {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    z-index: 1000;\n    width: 250px;\n    background-color: rgba(255, 255, 255, 0.7);\n    /* border-radius: 8px; */\n    padding: 10px 10px;\n    box-sizing: border-box;\n\n    transition: all 0.1s ease-in;\n\n    /* background-color: black; */\n    /* border: 1px solid black; */\n  }\n\n  .tabs-container {\n    position: absolute;\n    top: 10px;\n    left: 50px;\n    right: 50px;\n    z-index: 1000;\n    /* max-width: 750px; */\n    /* background-color: rgba(255, 255, 255, 0.7); */\n    /* border-radius: 8px; */\n    padding: 10px 10px;\n    box-sizing: border-box;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    transition: all 0.1s ease-in;\n\n    /* background-color: black; */\n    /* border: 1px solid black; */\n  }\n\n  .legend-container {\n    position: absolute;\n    top: 200px;\n    bottom: 160px;\n    left: 20px;\n    z-index: 1000;\n    /* background-color: rgba(255, 255, 255, 0.7); */\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n\n    transition: all 0.1s ease-in;\n  }\n\n  .graph-container {\n    position: absolute;\n    bottom: 2vh;\n    right: 2vh;\n    z-index: 1001;\n    max-width: 400px;\n    width: 400px;\n    background-color: rgba(255, 255, 255, 0.7);\n    /* border-radius: 1rem; */\n    padding: 10px 15px;\n    box-sizing: border-box;\n\n    transition: all 0.1s ease-in;\n  }\n\n  .time-container {\n    position: absolute;\n    bottom: 60px;\n    left: 20px;\n    z-index: 1002;\n    /* background-color: rgba(255, 255, 255, 0.7); */\n    /* border-radius: 8px; */\n    padding: 5px 10px;\n    box-sizing: border-box;\n    /* width: 550px; */\n\n    transition: all 0.1s ease-in;\n  }\n\n  .options-container:hover {\n    background-color: rgba(255, 255, 255, 0.9);\n  }\n\n  /* .options-container:hover,\n  .time-container:hover,\n  .graph-container:hover {\n    background-color: rgba(255, 255, 255, 0.9);\n  }  */\n\n  .error-message-container {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    color: gray;\n  }\n</style>\n\n{#if error}\n  <div class=\"error-message-container\">Failed to load data. Please try again later...</div>\n{/if}\n\n<MapBox />\n\n<div class=\"options-container\">\n  <Options />\n</div>\n\n<div class=\"tabs-container\">\n  <Tabs />\n</div>\n\n<div class=\"time-container\">\n  <Time {updateRegionSliceCache} />\n</div>\n\n<div class=\"legend-container\">\n  <Legend />\n</div>\n\n<div class=\"graph-container\">\n  <Graph />\n</div>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import {\n    currentRegion,\n    currentSensor,\n    currentLevel,\n    currentData,\n    regionData,\n    regionDataStats,\n    currentSensorName,\n    currentLevelName,\n    currentDataReadyOnMay,\n  } from './stores.js';\n  import * as d3 from 'd3';\n\n  let el;\n  let w;\n  let t;\n\n  // the $ syntax just says, if w is changed, run drawGraph() - e.g. redraw the graph when the window is resized.\n  // $: w, drawGraph();\n\n  // This subscribes to sample data to redraw the graph every time the data changes.\n  // todo: fix current region subscription\n  // currentRegion.subscribe(_ => updateGraph());\n  onMount(_ => drawGraph());\n\n  // local variables for permissible graph types\n  const barChart = 'Bar_Chart';\n  const lineGraph = 'Line_Graph';\n  const charts = [barChart, lineGraph];\n  let userCharts = [];\n  let currentChart = 0;\n\n  regionData.subscribe(d => updateGraph(d));\n  regionDataStats.subscribe(d => setChartRange(d));\n  // currentDataReadyOnMay.subscribe(d => setFocus());\n  // regionDataStats.subscribe(d => console.log(d));\n\n  function drawGraph() {\n    let chart = new Chart();\n    chart.draw();\n    userCharts.push(chart);\n  }\n\n  function updateGraph(data) {\n    if (data.length !== 0) {\n      if (userCharts != undefined) {\n        if (userCharts[currentChart].isChart()) {\n          userCharts[currentChart].draw();\n        } else {\n          var dataResults = parseData(data);\n          var graphType = dataResults[0];\n          var graphData = dataResults[1];\n          var range = dataResults[2];\n          userCharts[currentChart] = new Chart(graphType, graphData, range);\n          userCharts[currentChart].draw();\n        }\n      }\n    }\n  }\n\n  // parse data\n  function parseData(clickedData) {\n    let data = clickedData;\n    // let region = $currentRegion;\n\n    // search for the ID\n    // let re = new RegExp('US[0-9]+');\n    // let geo = region.match(re);\n    // console.log('region data: ' + geo);\n    // console.log('data: ' + data);\n    // for (var i = 0; i < data.length; i++) {\n    //   console.log(data[i].time_value);\n    // }\n\n    // todo: finish parsing data\n\n    // todo: determine chart type based on data\n    var dataRange = userCharts[currentChart].getRange();\n    var cType = lineGraph;\n    return [cType, data, dataRange];\n  }\n\n  function setChartRange(data) {\n    if (data) {\n      let { min_value, max_value } = data;\n      // let stats = $regionDataStats;\n      // console.log('stats: ' + stats);\n      // let min = dataStats.min_value;\n      // let max = dataStats.max_value;\n      // console.log(currentChart);\n      if (userCharts[currentChart] !== undefined) {\n        userCharts[currentChart].setRange(min_value, max_value);\n      }\n    }\n  }\n\n  class Chart {\n    constructor(chartType, data, dataRange) {\n      var chart;\n      this.chartType = chartType;\n      this.x = null;\n      this.y = null;\n      switch (chartType) {\n        case 'Bar_Chart':\n          chart = new BarChart();\n          chart.setData(data);\n          break;\n        case 'Line_Graph':\n          chart = new LineGraph();\n          chart.setData(data);\n          chart.setRange(dataRange[0], dataRange[1]);\n          break;\n        default:\n          TypeError('Chart type not a valid type.');\n      }\n      return chart;\n    }\n\n    setData(data) {\n      // this.verifyDataFormat(data);\n      // if(this.data === null) {\n      this.data = data;\n      // } else {\n      //   new Error('Cannot set data. Data already set. Use update method to change values.');\n      // }\n    }\n\n    getData() {\n      return this.data;\n    }\n\n    getYAxis() {\n      let title = '';\n      let sensor = $currentSensor;\n      console.log(sensor);\n      switch (sensor) {\n        case 'google-survey':\n          title = 'Percentage';\n          break;\n        case 'fb_survey':\n          title = 'Percentage';\n          break;\n        case 'quidel':\n          title = 'Percentage';\n          break;\n        case 'ght':\n          title = 'Frequency';\n          break;\n        case 'doctor-visits':\n          title = 'Percentage';\n          break;\n        default:\n          break;\n      }\n      return title;\n    }\n\n    getChartTitle() {\n      var ChartTitle = 'Currently viewing sensor ';\n      let title = '';\n      let sensor = $currentSensor;\n      let geoLevel = $currentLevel;\n      console.log(geoLevel);\n      switch (sensor) {\n        case 'google-survey':\n          title = 'Survey (Google)';\n          break;\n        case 'fb_survey':\n          title = 'Survey (Facebook)';\n          break;\n        case 'quidel':\n          title = 'Lab Tests (Quidel)';\n          break;\n        case 'ght':\n          title = 'Search Trends (Google)';\n          break;\n        case 'doctor-visits':\n          title = 'Doctor Visits';\n          break;\n        default:\n          break;\n      }\n      let geoTitle = '';\n      switch (geoLevel) {\n        case 'county':\n          geoTitle = 'County';\n          break;\n        case 'state':\n          geoTitle = 'State';\n          break;\n        default:\n          break;\n      }\n      var cT = ChartTitle + ' <strong> ' + title + '</strong> at the <strong>' + geoTitle + '</strong> level';\n      d3.select(t).html(cT);\n    }\n\n    isChart() {\n      var result = null;\n      try {\n        this.chartType in charts ? (result = true) : (result = false);\n      } catch (e) {\n        if (e.name == 'ReferenceError') {\n          result = false;\n        }\n      }\n      return result;\n    }\n\n    verifyDataFormat() {}\n\n    draw() {\n      // if there is an existing chart, remove it and redraw\n      d3.select(el)\n        .selectAll('*')\n        .remove();\n\n      // size chart\n      var margin = { top: 20, right: 20, bottom: 70, left: 40 },\n        width = w - margin.left - margin.right,\n        height = 0.75 * w - margin.top - margin.bottom;\n\n      // parse the date time\n      var parseDate = d3.timeParse('%Y%m%d');\n\n      // set ranges\n      this.x = d3.scaleBand().rangeRound([0, width]);\n      this.y = d3.scaleLinear().range([height, 0]);\n\n      // attach graphic\n      var svg = d3\n        .select(el)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      // draw axes\n      svg\n        .append('g')\n        .attr('transform', 'translate(0,' + height + ')')\n        .call(d3.axisBottom(this.x).tickFormat('%m %d'));\n      svg.append('g').call(d3.axisLeft(this.y));\n    }\n\n    updateChart() {}\n\n    setRange(min, max) {\n      this.min = min;\n      this.max = max;\n    }\n\n    getRange() {\n      return [this.min, this.max];\n    }\n    updateAxes() {}\n  }\n\n  class BarChart extends Chart {\n    // verify that the supplied data is an array of integers for a single data source\n    verifyDataFormat(data) {\n      super.verifyDataFormat();\n      !Number.isInteger(Object.values(data))\n        ? TypeError('Provided data is of the wrong type. Only integers accepted.')\n        : true;\n      data.length > 1\n        ? RangeError('Bar charts are only valid for single data sources. Comparisons are not supported.')\n        : true;\n      data.length < 1 ? ReferenceError('No data was provided.') : true;\n    }\n\n    draw() {\n      super.draw();\n    }\n  }\n\n  class LineGraph extends Chart {\n    draw() {\n      // if there is an existing chart, remove it and redraw\n      d3.select(el)\n        .selectAll('*')\n        .remove();\n\n      // line graph\n      let myData = this.getData();\n      console.log('length: ' + myData);\n\n      // size chart\n      var margin = { top: 20, right: 45, bottom: 70, left: 60 },\n        width = w - margin.left - margin.right,\n        height = 0.75 * w - margin.top - margin.bottom;\n\n      d3.select(el).html('');\n      var svg = d3\n        .select(el)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n      var parseTime = d3.timeParse('%Y%m%d');\n      var formatTime = d3.timeFormat('%m-%d-%Y');\n      var k = d3.keys(myData);\n      var times = k.map(i => parseTime(myData[k[i]]['time_value']));\n      var maxDate = Math.max.apply(null, times);\n      var twoWeeks = 60 * 60 * 24 * 1000 * 7 * 2;\n      var bisectDate = d3.bisector(function(d) {\n          return d.time_value;\n        }).right,\n        maxDate = maxDate - twoWeeks;\n      maxDate = new Date(maxDate);\n      myData = myData.filter(it => parseTime(it['time_value']) > maxDate);\n      var x = d3\n        .scaleTime()\n        .domain(d3.extent(myData, d => parseTime(d.time_value)))\n        .range([0, width]);\n      var y = d3\n        .scaleLinear()\n        .domain([this.min, this.max * 1.3])\n        .range([height, 0]);\n\n      svg\n        .append('g')\n        .attr('class', 'axis')\n        .attr('transform', 'translate(0,' + height + ')')\n        .call(\n          d3\n            .axisBottom(x)\n            .tickFormat(d3.timeFormat('%m/%d'))\n            .ticks(d3.timeDay.every(4)),\n        );\n      svg\n        .append('g')\n        .attr('class', 'axis')\n        .call(d3.axisLeft(y).ticks(8));\n\n      let line = d3\n        .line()\n        .x(d => x(parseTime(d.time_value)))\n        .y(d => y(+d.value));\n\n      svg\n        .append('path')\n        .attr('fill', 'none')\n        .attr('stroke', '#CB2F4A')\n        .attr('stroke-width', 3)\n        .attr('d', line(myData));\n\n      // label the y-axis\n      var label = this.getYAxis();\n      svg\n        .append('text')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', 0 - margin.left)\n        .attr('x', 0 - height / 2)\n        .attr('dy', '0.75em')\n        .style('text-anchor', 'middle')\n        .text(label);\n\n      // label the x-axis\n      svg\n        .append('text')\n        .attr('transform', 'translate(' + width / 2 + ', ' + (height + margin.top + 20) + ')')\n        .style('text-anchor', 'middle')\n        .text('Date');\n\n      // label the chart\n      this.getChartTitle();\n      // var chartTitle = this.getChartTitle();\n      // svg\n      //   .append('text')\n      //   .attr('transform', 'translate(' + width/2 + ', ' + 0 + ')')\n      //   .style('text-anchor', 'middle')\n      //   .text(chartTitle);\n\n      // line chart tooltip\n      let focus = svg\n        .append('g')\n        .attr('class', 'focus')\n        .style('display', 'none');\n\n      focus\n        .append('circle')\n        .attr('r', 5)\n        .style('fill', 'red');\n\n      focus\n        .append('rect')\n        .attr('class', 'tooltip')\n        .attr('width', 80)\n        .attr('height', 30)\n        .attr('x', -40)\n        .attr('y', -40)\n        .attr('rx', 4)\n        .attr('ry', 4)\n        .style('fill', 'white')\n        .style('stroke', '#666');\n\n      focus\n        .append('text')\n        .attr('class', 'tooltip-date')\n        .attr('x', -35)\n        .attr('y', -20)\n        .style('font-size', '12px');\n\n      svg\n        .append('rect')\n        .attr('class', 'overlay')\n        .attr('width', width)\n        .attr('height', height)\n        .style('fill', 'none')\n        .style('pointer-events', 'all')\n        .on('mouseover', function() {\n          focus.style('display', null);\n        })\n        .on('mouseout', function() {\n          focus.style('display', 'none');\n        })\n        .on('mousemove', mousemove);\n\n      function mousemove() {\n        var x0 = x.invert(d3.mouse(this)[0]);\n        var i = bisectDate(myData, +calculateValFromRectified(x0), 1);\n        var d0 = myData[i - 1];\n        var d1 = myData[i];\n        var d = x0 - parseTime(d0.time_value) > parseTime(d1.time_value) - x0 ? d1 : d0;\n        focus.attr('transform', 'translate(' + x(parseTime(d.time_value)) + ',' + y(d.value) + ')');\n        focus\n          .select('.tooltip-date')\n          .text(d3.timeFormat('%m/%d')(parseTime(d.time_value)) + ': ' + d3.format(',.3f')(d.value));\n      }\n    }\n  }\n\n  function calculateValFromRectified(rectified) {\n    let tempDate = new Date(rectified);\n    let year = tempDate.getFullYear();\n    let month = ('0' + (tempDate.getMonth() + 1)).slice(-2);\n    let date = ('0' + tempDate.getDate()).slice(-2);\n    return year + month + date;\n  }\n\n  function setFocus() {}\n</script>\n\n<style>\n  .graph-title {\n    text-align: center;\n    margin: 0px;\n  }\n</style>\n\n<h4 class=\"graph-title\">Intensity Data Over Time</h4>\n<p bind:this={t} />\n<div bind:clientWidth={w}>\n  <div bind:this={el} />\n</div>\n",
    "<script>\n  import { signalType } from './stores.js';\n  import { DIRECTION_THEME } from './theme.js';\n</script>\n\n<style>\n  .legend {\n    font-size: 0.8rem;\n    /* border-radius: 8px; */\n    padding: 10px 10px;\n    box-sizing: border-box;\n    background-color: rgba(255, 255, 255, 0.7);\n    transition: all 0.1s ease-in;\n  }\n\n  .legend:hover {\n    background-color: rgba(255, 255, 255, 0.9);\n  }\n\n  .legend.value {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .color {\n    width: 20px;\n    height: 80px;\n    /* border-radius: 50%; */\n    margin-right: 10px;\n    display: inline-block;\n    /* border: 1px solid #dbdbdb; */\n    border-top-style: none;\n  }\n\n  .legend p {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    color: rgba(0, 0, 0, 0.7);\n    margin: 0px 0px;\n    padding: 0px;\n  }\n\n  .direction-indicators {\n    margin-right: 6px;\n  }\n\n  .legend-bar {\n    background: linear-gradient(to top, #fff, #c41230);\n    width: 20px;\n    height: 300px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n</style>\n\n<div class=\"legend {$signalType === 'value' ? 'value' : null}\">\n  {#if $signalType === 'direction'}\n    <p>\n      <span class=\"color inc\" style=\"background-color: {DIRECTION_THEME.increasing}\" />\n      <span class=\"direction-indicators inc\">&#8599;</span>\n      Increasing\n    </p>\n    <p>\n      <span class=\"color const\" style=\"background-color: {DIRECTION_THEME.steady}\" />\n      <span class=\"direction-indicators const\">&#8594;</span>\n      Steady\n    </p>\n    <p>\n      <span class=\"color dec\" style=\"background-color: {DIRECTION_THEME.decreasing}\" />\n      <span class=\"direction-indicators dec\">&#8600;</span>\n      Decreasing\n    </p>\n  {:else}\n    <p>High</p>\n    <div class=\"legend-bar\" />\n    <p>None</p>\n  {/if}\n</div>\n",
    "<script>\n  import mapboxgl from 'mapbox-gl';\n  import {\n    levels,\n    currentRegion,\n    geojsons,\n    currentLevel,\n    currentSensor,\n    currentData,\n    currentRange,\n    signalType,\n    currentDataReadyOnMay,\n  } from './stores.js';\n  import { DIRECTION_THEME } from './theme.js';\n\n  const LAT = -1.2;\n  const LON = -0.5;\n  const ZOOM = 4.3; // should be set to 4.4 as default\n\n  let container;\n  let map;\n\n  // Boolean tracking if the map has been initialized.\n  let mounted = false;\n\n  // If it hasn't been initialized and we have geojsons and initial data, create map.\n  $: if (!map && $geojsons.size !== 0 && $currentData.length !== 0) initializeMap();\n\n  // Update the map when sensor or level changes.\n  currentData.subscribe(_ => updateMap());\n  signalType.subscribe(_ => updateMap());\n\n  function updateMap() {\n    if (!mounted) return;\n\n    let minMax = [999999999, -1];\n    let mappedVals = new Map();\n    let geoIds = new Set(\n      $currentData.map(d => {\n        let dat = d[$signalType];\n        minMax[0] = dat < minMax[0] ? dat : minMax[0];\n        minMax[1] = dat > minMax[1] ? dat : minMax[1];\n        if (dat !== null) {\n          mappedVals.set(d.geo_value.toUpperCase(), d[$signalType]);\n        }\n        return d.geo_value.toUpperCase();\n      }),\n    );\n    currentRange.set(minMax);\n\n    let dat = $geojsons.get($currentLevel);\n    dat.features.forEach(d => {\n      let id;\n      if ($currentLevel === 'county') {\n        id = d.properties.GEO_ID.slice(-5);\n      } else if ($currentLevel === 'msa') {\n        id = d.properties.cbsafp;\n      } else if ($currentLevel === 'state') {\n        id = d.properties.POSTAL;\n      }\n      d.properties.id = id;\n      if (geoIds.has(id) && mappedVals.get(id) !== null) {\n        d.properties.val = mappedVals.get(id);\n      } else {\n        d.properties.val = -100;\n      }\n    });\n\n    let stops = [[minMax[0], '#fff'], [minMax[1], '#c41230']];\n    if ($signalType === 'direction') {\n      stops = [[-1, DIRECTION_THEME.decreasing], [0, DIRECTION_THEME.steady], [1, DIRECTION_THEME.increasing]];\n    }\n\n    map.getSource($currentLevel).setData(dat);\n\n    Object.keys($levels).forEach(name => {\n      if (name === $currentLevel) {\n        if (map.getLayer(name)) {\n          map.setPaintProperty(name, 'fill-color', {\n            property: 'val',\n            stops: stops,\n          });\n          map.setLayoutProperty(name, 'visibility', 'visible');\n        } else {\n          map.addLayer(\n            {\n              id: $currentLevel,\n              source: $currentLevel,\n              type: 'fill',\n              filter: ['!=', 'val', -100],\n              paint: {\n                'fill-outline-color': '#616161',\n                'fill-color': {\n                  property: 'val',\n                  stops: stops,\n                },\n              },\n            },\n            'city-point-unclustered',\n          );\n        }\n      } else {\n        map.getLayer(name) && map.setLayoutProperty(name, 'visibility', 'none');\n      }\n    });\n\n    map.on('click', $currentLevel, function(e) {\n      currentRegion.set(e.features[0].properties.id);\n      new mapboxgl.Popup()\n        .setLngLat(e.lngLat)\n        .setHTML(\"<p class='tooltip-text'>\" + e.features[0].properties.NAME + '</p>')\n        .addTo(map);\n    });\n    currentDataReadyOnMay.set(true);\n  }\n\n  function initializeMap() {\n    map = new mapboxgl.Map({\n      attributionControl: false,\n      container,\n      style: './maps/mapbox_albers_usa_style.json',\n      center: [LON, LAT],\n      zoom: ZOOM,\n      minZoom: ZOOM,\n    })\n      .addControl(new mapboxgl.AttributionControl({ compact: true }))\n      .addControl(new mapboxgl.NavigationControl({ showCompass: false }), 'top-right');\n\n    //Disable touch zoom, it makes gesture scrolling difficult\n    map.scrollZoom.disable();\n\n    map.on('load', function() {\n      map.addSource('county-outline', {\n        type: 'geojson',\n        data: $geojsons.get('county'),\n      });\n      map.addSource('state-outline', {\n        type: 'geojson',\n        data: $geojsons.get('state'),\n      });\n      map.addSource('city-point', {\n        type: 'geojson',\n        data: $geojsons.get('city'),\n        cluster: true,\n        clusterMaxZoom: 14, // Max zoom to cluster points on\n        clusterRadius: 100, // Radius of each cluster when clustering points (defaults to 50),\n        clusterProperties: {\n          largest: [\n            [\n              'case',\n              ['<', ['get', 'rank', ['accumulated']], ['get', 'rank', ['get', 'largest']]],\n              ['accumulated'],\n              ['properties'],\n            ],\n            ['properties'],\n          ],\n        },\n      });\n      map.addLayer({\n        id: 'county-outline',\n        source: 'county-outline',\n        type: 'fill',\n        paint: {\n          'fill-color': '#e4dac4',\n          'fill-outline-color': '#e0e0e0',\n          'fill-opacity': 0.4,\n        },\n      });\n      map.addLayer({\n        id: 'state-outline',\n        source: 'state-outline',\n        type: 'fill',\n        paint: {\n          'fill-color': 'rgba(0, 0, 0, 0)',\n          'fill-outline-color': '#bcbcbc',\n        },\n      });\n      map.addLayer({\n        id: 'city-point-unclustered',\n        source: 'city-point',\n        type: 'symbol',\n        filter: ['!', ['has', 'point_count']],\n        layout: {\n          'text-field': ['get', 'city'],\n          'text-font': ['Open Sans Regular'],\n          'text-size': 12,\n        },\n        paint: {\n          'text-halo-color': '#ffffff',\n          'text-halo-width': 2,\n        },\n      });\n      map.addLayer({\n        id: 'city-point-clustered',\n        source: 'city-point',\n        type: 'symbol',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': ['get', 'city', ['get', 'largest']],\n          'text-font': ['Open Sans Regular'],\n          'text-size': 12,\n        },\n        paint: {\n          'text-halo-color': '#ffffff',\n          'text-halo-width': 2,\n        },\n      });\n\n      Object.keys($levels).forEach(name => {\n        let data = $geojsons.get(name);\n        map.addSource(name, {\n          type: 'geojson',\n          data: data,\n        });\n      });\n\n      mounted = true;\n      updateMap();\n    });\n  }\n\n  function zoomBack() {}\n</script>\n\n<style>\n  .map-container {\n    width: 100%;\n    height: 100vh;\n    position: relative;\n  }\n\n  .state-buttons-holder {\n    position: absolute;\n    top: 92px;\n    right: 9px;\n    z-index: 100;\n  }\n\n  .state-buttons-holder button:focus {\n    outline: none;\n  }\n\n  .state-buttons-holder .pg-button {\n    font-size: 23px;\n    position: relative;\n    width: 29px;\n    height: 29px;\n    color: #3a3a3a;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.1);\n    padding: 0;\n    box-sizing: content-box;\n    background-color: white;\n    border: 1px solid #d5d5d5;\n    border-radius: 4px;\n    text-align: center;\n    font-family: 'FranklinITCProBold', Helvetica, Arial, sans-serif;\n    line-height: 16px;\n    cursor: pointer;\n    text-decoration: none;\n    user-select: none;\n    transition-delay: 0s;\n    transition-duration: 0.15s;\n    transition-property: background-color;\n    transition-timing-function: ease-in-out;\n  }\n\n  .state-buttons-holder .pg-button:hover {\n    background-color: rgb(213, 213, 213);\n  }\n\n  .state-buttons-holder .pg-button img {\n    width: 90%;\n    /* height: 100%; */\n  }\n</style>\n\n<div bind:this={container} class=\"map-container\">\n  <div class=\"state-buttons-holder\">\n    <button\n      data-state=\"us48\"\n      id=\"bounds-button\"\n      class=\"pg-button bounds-button\"\n      on:click={_ => map.easeTo({ center: [LON, LAT], zoom: ZOOM })}>\n      <img src=\"./assets/imgs/us48.png\" alt=\"\" />\n    </button>\n  </div>\n</div>\n",
    "<script>\n  import { sensors, currentSensor, levels, currentLevel, signalType } from './stores.js';\n\n  let hide = false;\n\n  function toggleHide() {\n    hide = !hide;\n  }\n</script>\n\n<style>\n  .options {\n    font-size: 0.8rem;\n    width: 100%;\n    position: relative;\n  }\n\n  .toggle-button {\n    width: 28px;\n    height: 28px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    /* border-radius: 5px; */\n    cursor: pointer;\n    background-color: transparent;\n\n    transition: all 0.1s ease-in;\n  }\n\n  .toggle-button:hover {\n    background-color: rgb(228, 228, 228);\n  }\n\n  .toggle-button.float {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n\n  .toggle-button-icon {\n    width: 24px;\n    height: 24px;\n  }\n\n  .option {\n    width: 100%;\n  }\n\n  .buttons-group-title {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 5px;\n\n    font-weight: 600;\n    font-size: 1em;\n  }\n\n  .buttons-group {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .buttons-group .button {\n    width: 100%;\n    margin: 0;\n    font-size: 1em;\n    font-weight: 400;\n    background-color: rgb(222, 222, 222);\n    border-style: solid;\n    border-color: #dbdbdb;\n    border-top-color: transparent;\n    border-width: 1px;\n    color: #363636;\n    cursor: pointer;\n    justify-content: center;\n    padding-bottom: calc(0.5em - 1px);\n    padding-left: 1em;\n    padding-right: 1em;\n    padding-top: calc(0.5em - 1px);\n    text-align: center;\n    /* white-space: nowrap; */\n\n    transition: all 0.1s ease-in;\n  }\n\n  .buttons-group-side {\n    width: 100%;\n    display: flex;\n    align-items: stretch;\n    justify-content: stretch;\n  }\n\n  .buttons-group-side .button {\n    /* width: 50%; */\n    flex-grow: 1;\n    margin: 0;\n    font-size: 1em;\n    font-weight: 400;\n    background-color: rgb(222, 222, 222);\n    border-style: solid;\n    border-color: #dbdbdb;\n    border-left-color: transparent;\n    border-width: 1px;\n    color: #363636;\n    cursor: pointer;\n    justify-content: center;\n    padding-bottom: calc(0.5em - 1px);\n    padding-left: 1em;\n    padding-right: 1em;\n    padding-top: calc(0.5em - 1px);\n    text-align: center;\n    /* white-space: nowrap; */\n\n    transition: all 0.1s ease-in;\n  }\n\n  .buttons-group .button:first-child {\n    border-top-color: #dbdbdb;\n    /* border-top-left-radius: 4px; */\n    /* border-top-right-radius: 4px; */\n  }\n\n  .buttons-group .button:last-child {\n    /* border-bottom-left-radius: 4px; */\n    /* border-bottom-right-radius: 4px; */\n  }\n\n  .buttons-group-side .button:first-child {\n    border-left-color: #dbdbdb;\n    /* border-top-left-radius: 4px; */\n    /* border-bottom-left-radius: 4px; */\n  }\n\n  .buttons-group-side .button:last-child {\n    /* border-top-right-radius: 4px; */\n    /* border-bottom-right-radius: 4px; */\n  }\n\n  .buttons-group .button.selected,\n  .buttons-group-side .button.selected {\n    background-color: #fff;\n    /* border-color: transparent; */\n    color: #000;\n    font-weight: 600;\n  }\n\n  .buttons-group .button:focus,\n  .buttons-group .button:active,\n  .buttons-group-side .button:focus,\n  .buttons-group-side .button:active {\n    box-shadow: none !important;\n    outline: none;\n  }\n</style>\n\n<div class=\"options\">\n  {#if hide}\n    <div class=\"toggle-button\" on:click={toggleHide}>\n      <img class=\"toggle-button-icon\" src=\"./assets/imgs/layers-24px.svg\" alt=\"\" />\n    </div>\n  {:else}\n    <div class=\"toggle-button float\" on:click={toggleHide}>\n      <img class=\"toggle-button-icon\" src=\"./assets/imgs/layers_clear-24px.svg\" alt=\"\" />\n    </div>\n    <br />\n    <br />\n\n    <div class=\"option\">\n      <!-- <div class=\"buttons-group-title\">Geographic Level</div> -->\n      <div class=\"buttons-group\">\n        {#each $sensors.find(d => d.id === $currentSensor).levels as level}\n          <button class=\"button {$currentLevel === level ? 'selected' : null}\" on:click={() => currentLevel.set(level)}>\n            {$levels[level]}\n          </button>\n        {/each}\n      </div>\n    </div>\n\n    <br />\n\n    <div class=\"option\">\n      <!-- <div class=\"buttons-group-title\">Signal Type</div> -->\n      <div class=\"buttons-group-side\">\n        <button class=\"button {$signalType === 'value' ? 'selected' : null}\" on:click={() => signalType.set('value')}>\n          Intensity\n        </button>\n        <button\n          class=\"button {$signalType === 'direction' ? 'selected' : null}\"\n          on:click={() => signalType.set('direction')}>\n          Direction\n        </button>\n\n      </div>\n    </div>\n  {/if}\n</div>\n\n<!-- <div class=\"options\">\n  <form class=\"pure-form\">\n    <div class=\"pure-g\">\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"sensor\">Select sensor:</label>\n        <select id=\"sensor\" bind:value={$currentSensor}>\n          {#each $sensors as sensor}\n            <option value={sensor.id}>{sensor.name}</option>\n          {/each}\n        </select>\n      </div>\n\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"level\">Select level:</label>\n        <select id=\"level\" bind:value={$currentLevel}>\n          {#each $sensors.find(d => d.id === $currentSensor).levels as level}\n            <option value={level}>{$levels[level]}</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n  </form>\n</div> -->\n",
    "<script>\n  import { sensors, currentSensor, levels, currentLevel, signalType, currentDataReadyOnMay } from './stores.js';\n\n  let hide = false;\n\n  function toggleHide() {\n    hide = !hide;\n  }\n</script>\n\n<style>\n  .options {\n    font-size: 0.8rem;\n    width: 100%;\n    position: relative;\n  }\n\n  .option {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .buttons-group-title {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 15px;\n\n    font-weight: 600;\n    font-size: 1em;\n    line-height: 1em;\n  }\n\n  .buttons-group-side {\n    display: flex;\n    align-items: stretch;\n    /* justify-content: center; */\n    /* flex-wrap: wrap; */\n  }\n\n  .buttons-group-side .button {\n    margin: 0;\n    font-size: 1em;\n    font-weight: 400;\n    line-height: 1em;\n    background-color: rgb(222, 222, 222);\n    border-style: solid;\n    border-color: #dbdbdb;\n    border-left-color: transparent;\n    border-width: 1px;\n    color: #363636;\n    cursor: pointer;\n    justify-content: center;\n    padding-bottom: calc(0.5em - 1px);\n    padding-left: 1em;\n    padding-right: 1em;\n    padding-top: calc(0.5em - 1px);\n    text-align: center;\n    /* white-space: nowrap; */\n\n    transition: all 0.1s ease-in;\n  }\n\n  .buttons-group-side .button:first-child {\n    border-left-color: #dbdbdb;\n    /* border-top-left-radius: 4px; */\n    /* border-bottom-left-radius: 4px; */\n  }\n\n  .buttons-group-side .button:last-child {\n    /* border-top-right-radius: 4px; */\n    /* border-bottom-right-radius: 4px; */\n  }\n\n  .buttons-group-side .button.selected {\n    background-color: #fff;\n    /* border-color: transparent; */\n    color: #000;\n    font-weight: 600;\n  }\n\n  .buttons-group-side .button:focus,\n  .buttons-group-side .button:active {\n    box-shadow: none !important;\n    outline: none;\n  }\n</style>\n\n<div class=\"options\">\n  <div class=\"option\">\n    <!-- <div class=\"buttons-group-title\">Data Source</div> -->\n    <div class=\"buttons-group-side\">\n      {#each $sensors as sensor}\n        <button\n          class=\"button {$currentSensor === sensor.id ? 'selected' : null}\"\n          on:click={() => {\n            currentDataReadyOnMay.set(false);\n            currentSensor.set(sensor.id);\n          }}>\n          {sensor.name}\n        </button>\n      {/each}\n    </div>\n  </div>\n\n</div>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { currentDate, times, currentSensor, currentDataReadyOnMay } from './stores.js';\n  import * as d3 from 'd3';\n\n  let timeSliderPaddingLeft;\n  let timeSliderPaddingRight;\n  let timeSlider;\n  let selectedDateDisplay;\n\n  let parseTime = d3.timeParse('%Y%m%d');\n  let formatTime = d3.timeFormat('%B %d, %Y');\n  let formatTimeWithoutYear = d3.timeFormat('%B %d');\n\n  let interval = 14;\n  let rectifiedRange = interval;\n  let sliderTotalLength = 320; // in px\n  let canLoadMore = true;\n\n  let val = $currentDate;\n  let min = $currentDate;\n  let max = $currentDate;\n\n  let today = new Date(\n    new Date()\n      .toJSON()\n      .slice(0, 10)\n      .replace(/-/g, '/'),\n  );\n\n  let rectifiedVal = parseTime(val).getTime();\n  let rectifiedMax = today.getTime();\n  let rectifiedMin = rectifiedMax - rectifiedRange * 86400 * 1000;\n\n  let dataRangeMin = parseTime(min).getTime();\n  let dataRangeMax = parseTime(max).getTime();\n\n  let prettyDate = '';\n  $: prettyDate = formatTime(new Date(rectifiedVal));\n\n  currentDate.subscribe(d => {\n    val = d;\n    rectifiedVal = parseTime(val).getTime();\n  });\n  times.subscribe(t => (t ? update($currentSensor, t) : ''));\n  currentSensor.subscribe(s => ($times ? update(s, $times, true) : ''));\n\n  function update(s, t, newSensor = false) {\n    if (newSensor) {\n      // reset range\n      rectifiedRange = interval;\n      rectifiedMin = rectifiedMax - rectifiedRange * 86400 * 1000;\n    }\n\n    max = t.get(s)[1];\n    min = t.get(s)[0];\n    dataRangeMin = parseTime(min).getTime();\n    dataRangeMax = parseTime(max).getTime();\n\n    updateSliderUI();\n\n    currentDate.set(max);\n  }\n\n  function updateSliderUI() {\n    if (dataRangeMax <= rectifiedMax && dataRangeMin >= rectifiedMin) {\n      /**\n       * fall within\n       *    -------------------\n       *        ---------\n       */\n      let leftPercentage = (dataRangeMin - rectifiedMin) / (rectifiedRange * 86400 * 1000);\n      let middlePercentage = (dataRangeMax - dataRangeMin) / (rectifiedRange * 86400 * 1000);\n      let rightPercentage = (rectifiedMax - dataRangeMax) / (rectifiedRange * 86400 * 1000);\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', dataRangeMin);\n      timeSlider.setAttribute('max', dataRangeMax);\n      canLoadMore = false;\n    } else if (dataRangeMax <= rectifiedMax && dataRangeMin <= rectifiedMin) {\n      /**\n       *\n       *    -------------------\n       *  ---------\n       */\n      let leftPercentage = 0;\n      let middlePercentage = (dataRangeMax - rectifiedMin) / (rectifiedRange * 86400 * 1000);\n      let rightPercentage = (rectifiedMax - dataRangeMax) / (rectifiedRange * 86400 * 1000);\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', rectifiedMin);\n      timeSlider.setAttribute('max', dataRangeMax);\n      canLoadMore = true;\n    } else if (dataRangeMax >= rectifiedMax && dataRangeMin >= rectifiedMin) {\n      /**\n       *\n       *    -------------------\n       *                ---------\n       */\n      let leftPercentage = (dataRangeMin - rectifiedMin) / (rectifiedRange * 86400 * 1000);\n      let middlePercentage = (rectifiedMax - dataRangeMin) / (rectifiedRange * 86400 * 1000);\n      let rightPercentage = 0;\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', dataRangeMin);\n      timeSlider.setAttribute('max', rectifiedMax);\n      canLoadMore = false;\n    } else if (dataRangeMax >= rectifiedMax && dataRangeMin <= rectifiedMin) {\n      /**\n       *\n       *    -------------------\n       *  -----------------------\n       */\n      let leftPercentage = 0;\n      let middlePercentage = 1;\n      let rightPercentage = 0;\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', rectifiedMin);\n      timeSlider.setAttribute('max', rectifiedMax);\n      canLoadMore = true;\n    }\n\n    console.log(canLoadMore);\n  }\n\n  function calculateValFromRectified(rectified) {\n    let tempDate = new Date(rectified);\n    let year = tempDate.getFullYear();\n    let month = ('0' + (tempDate.getMonth() + 1)).slice(-2);\n    let date = ('0' + tempDate.getDate()).slice(-2);\n    return year + month + date;\n  }\n\n  function sliderOnMouseUp() {\n    currentDataReadyOnMay.set(false);\n    currentDate.set(calculateValFromRectified(rectifiedVal));\n  }\n\n  function loadMoreDataRange() {\n    rectifiedRange += interval;\n    rectifiedMin = rectifiedMax - rectifiedRange * 86400 * 1000;\n    updateSliderUI();\n  }\n\n  // currentDataReadyOnMay.subscribe(d => console.log('map set:', d));\n</script>\n\n<style>\n  .time {\n    display: inline-flex;\n    align-items: center;\n    width: 100%;\n    position: relative;\n  }\n\n  .selected-date {\n    position: absolute;\n    top: -20px;\n    left: 10px;\n    /* width: 300px; */\n    height: 24px;\n    /* background-color: lightgray; */\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .load-more-button {\n    position: absolute;\n    bottom: -18px;\n    left: 10px;\n\n    margin: 0;\n    font-size: 0.7rem;\n    font-weight: 300;\n    background-color: rgb(222, 222, 222);\n    border-style: solid;\n    border-color: #eeeeee;\n    border-width: 1px;\n    color: #363636;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: calc(0.3rem - 1px);\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n    padding-top: calc(0.3rem - 1px);\n\n    transition: all 0.1s ease-in;\n  }\n\n  .load-more-button:hover {\n    /* background-color: rgb(255, 255, 255); */\n    /* transform: scale(1.05); */\n    font-weight: 600;\n  }\n\n  .load-more-button:focus {\n    outline: none;\n  }\n\n  .load-more-button:disabled {\n    background-color: rgb(204, 204, 204);\n    color: rgb(102, 102, 102);\n    cursor: not-allowed;\n    font-weight: 300;\n    font-size: 0.7rem;\n    transform: none;\n  }\n\n  .time p {\n    flex-shrink: 0;\n    margin-left: 10px;\n    margin-right: 10px;\n    color: var(--grey);\n  }\n\n  .time p.min-max {\n    font-size: 0.8rem;\n    color: #666;\n  }\n\n  #timeSliderPaddingLeft,\n  #timeSliderPaddingRight {\n    /* flex-grow: 1; */\n    height: 6px;\n    padding: 0;\n    border-style: none;\n    /* background: #7e7e7e; */\n    background: repeating-linear-gradient(-45deg, #666, #666 2px, #eee 2px, #eee 4px);\n    outline: none;\n    opacity: 0.7;\n  }\n\n  #timeSliderPaddingLeft {\n    position: relative;\n  }\n\n  .slider {\n    /* flex-grow: 1; */\n    -webkit-appearance: none;\n    width: 320px;\n    height: 6px;\n    padding: 0;\n    border-style: none;\n    background: #d3d3d3;\n    outline: none;\n    opacity: 0.7;\n  }\n\n  .slider::-moz-focus-outer {\n    border: 0;\n  }\n\n  .slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: var(--red);\n    cursor: pointer;\n  }\n\n  .slider::-moz-range-thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: var(--red);\n    cursor: pointer;\n  }\n\n  .loader-container {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: -40px;\n    width: 40px;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .loader {\n    border: 4px solid #f3f3f3;\n    border-radius: 50%;\n    border-top: 4px solid #c41230;\n    width: 20px;\n    height: 20px;\n    -webkit-animation: spin 1s linear infinite; /* Safari */\n    animation: spin 1s linear infinite;\n  }\n\n  /* Safari */\n  @-webkit-keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n</style>\n\n<div class=\"time\">\n  <div class=\"selected-date\" bind:this={selectedDateDisplay}>\n    Viewing estimates for: {formatTimeWithoutYear(new Date(rectifiedVal))}\n  </div>\n\n  <button class=\"load-more-button\" on:click={loadMoreDataRange} disabled={!canLoadMore}>Load 2 more weeks</button>\n\n  <p class=\"min-max\">{formatTime(new Date(rectifiedMin))}</p>\n  <div id=\"timeSliderPaddingLeft\" bind:this={timeSliderPaddingLeft} />\n  <input\n    id=\"time_slider\"\n    bind:this={timeSlider}\n    type=\"range\"\n    min={rectifiedMin}\n    max={rectifiedMax}\n    step={86400000}\n    on:mouseup={sliderOnMouseUp}\n    class=\"slider\"\n    bind:value={rectifiedVal} />\n  <div id=\"timeSliderPaddingRight\" bind:this={timeSliderPaddingRight} />\n  <p class=\"min-max\">{formatTime(new Date(rectifiedMax))} (Today)</p>\n\n  {#if $currentDataReadyOnMay === false}\n    <div class=\"loader-container\">\n      <div class=\"loader\" />\n    </div>\n  {/if}\n\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}