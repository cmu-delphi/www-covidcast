{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../SimpleAutocomplete.svelte",
    "../../Datepicker.svelte",
    "../../Month.svelte",
    "../../NavBar.svelte",
    "../../Popover.svelte",
    "../../Week.svelte",
    "../../IconBase.svelte",
    "../../App.svelte",
    "../../Banner.svelte",
    "../../Graph.svelte",
    "../../GraphContainer.svelte",
    "../../Legend.svelte",
    "../../MapBox.svelte",
    "../../Options.svelte",
    "../../Time.svelte"
  ],
  "sourcesContent": [
    "<script>\n  // the list of items  the user can select from\n  export let items;\n\n  // field of each item that's used for the labels in the list\n  export let labelFieldName = undefined;\n  export let keywordsFieldName = labelFieldName;\n  export let valueFieldName = undefined;\n\n  export let labelFunction = function(item) {\n    if (item === undefined || item === null) {\n      return \"\";\n    }\n    return labelFieldName ? item[labelFieldName] : item;\n  };\n\n  export let keywordsFunction = function(item) {\n    if (item === undefined || item === null) {\n      return \"\";\n    }\n    return keywordsFieldName ? item[keywordsFieldName] : item;\n  };\n\n  export let valueFunction = function(item) {\n    if (item === undefined || item === null) {\n      return item;\n    }\n    return valueFieldName ? item[valueFieldName] : item;\n  };\n\n  export let keywordsCleanFunction = function(keywords) {\n    return keywords;\n  };\n\n  export let textCleanFunction = function(userEnteredText) {\n    return userEnteredText;\n  };\n\n  export let beforeChange = function(oldSelectedItem, newSelectedItem) {\n    return true;\n  };\n  export let onChange = function(newSelectedItem) {};\n\n  export let selectFirstIfEmpty = false;\n\n  export let minCharactersToSearch = 1;\n  export let maxItemsToShowInList = 0;\n  export let noResultsText = \"No results found\";\n\n  const uniqueId = \"sautocomplete-\" + Math.floor(Math.random() * 1000);\n\n  function safeStringFunction(theFunction, argument) {\n    if (typeof theFunction !== \"function\") {\n      console.error(\n        \"Not a function: \" + theFunction + \", argument: \" + argument\n      );\n    }\n    let originalResult;\n    try {\n      originalResult = theFunction(argument);\n    } catch (error) {\n      console.warn(\n        \"Error executing Autocomplete function on value: \" +\n          argument +\n          \" function: \" +\n          theFunction\n      );\n    }\n    let result = originalResult;\n    if (result === undefined || result === null) {\n      result = \"\";\n    }\n    if (typeof result !== \"string\") {\n      result = result.toString();\n    }\n    return result;\n  }\n\n  function safeLabelFunction(item) {\n    // console.log(\"labelFunction: \" + labelFunction);\n    // console.log(\"safeLabelFunction, item: \" + item);\n    return safeStringFunction(labelFunction, item);\n  }\n\n  function safeKeywordsFunction(item) {\n    // console.log(\"safeKeywordsFunction\");\n    const keywords = safeStringFunction(keywordsFunction, item);\n    let result = safeStringFunction(keywordsCleanFunction, keywords);\n    result = result.toLowerCase().trim();\n    if (debug) {\n      console.log(\n        \"Extracted keywords: '\" +\n          result +\n          \"' from item: \" +\n          JSON.stringify(item)\n      );\n    }\n    return result;\n  }\n\n  // the text displayed when no option is selected\n  export let placeholder = undefined;\n  // apply a className to the control\n  export let className = undefined;\n  // generate an HTML input with this name, containing the current value\n  export let name = undefined;\n  // adds the disabled tag to the HTML input\n  export let disabled = false;\n  // add the title to the HTML input\n  export let title = undefined;\n  export let debug = false;\n\n  // selected item state\n  export let selectedItem = undefined;\n  export let value = undefined;\n  let text;\n  let filteredTextLength = 0;\n\n  function onSelectedItemChanged() {\n    value = valueFunction(selectedItem);\n    text = safeLabelFunction(selectedItem);\n    onChange(selectedItem);\n  }\n\n  $: selectedItem, onSelectedItemChanged();\n\n  // HTML elements\n  let input;\n  let list;\n\n  // UI state\n  let opened = false;\n  let highlightIndex = -1;\n\n  // view model\n  let filteredListItems;\n\n  let listItems = [];\n\n  function prepareListItems() {\n    let tStart;\n    if (debug) {\n      tStart = performance.now();\n      console.log(\"prepare items to search\");\n      console.log(\"items: \" + JSON.stringify(items));\n    }\n    const length = items ? items.length : 0;\n    listItems = new Array(length);\n\n    if (length > 0) {\n      items.forEach((item, i) => {\n        listItems[i] = getListItem(item);\n      });\n    }\n\n    if (debug) {\n      const tEnd = performance.now();\n      console.log(\n        listItems.length +\n          \" items to search prepared in \" +\n          (tEnd - tStart) +\n          \" milliseconds\"\n      );\n    }\n  }\n\n  function getListItem(item) {\n    return {\n      // keywords representation of the item\n      keywords: safeKeywordsFunction(item),\n      // item label\n      label: safeLabelFunction(item),\n      // store reference to the origial item\n      item: item\n    };\n  }\n\n  $: items, prepareListItems();\n\n  function prepareUserEnteredText(userEnteredText) {\n    if (userEnteredText === undefined || userEnteredText === null) {\n      return \"\";\n    }\n\n    const textFiltered = userEnteredText\n      .replace(/[&/\\\\#,+()$~%.'\":*?<>{}]/g, \" \")\n      .trim();\n\n    filteredTextLength = textFiltered.length;\n\n    if (minCharactersToSearch > 1) {\n      if (filteredTextLength < minCharactersToSearch) {\n        return \"\";\n      }\n    }\n\n    const cleanUserEnteredText = textCleanFunction(textFiltered);\n    const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();\n\n    if (debug) {\n      console.log(\n        \"Change user entered text '\" +\n          userEnteredText +\n          \"' into '\" +\n          textFilteredLowerCase +\n          \"'\"\n      );\n    }\n    return textFilteredLowerCase;\n  }\n\n  function search() {\n    let tStart;\n    if (debug) {\n      tStart = performance.now();\n      console.log(\"Searching user entered text: '\" + text + \"'\");\n    }\n\n    const textFiltered = prepareUserEnteredText(text);\n\n    if (textFiltered === \"\") {\n      filteredListItems = listItems;\n      closeIfMinCharsToSearchReached();\n      if (debug) {\n        console.log(\n          \"User entered text is empty set the list of items to all items\"\n        );\n      }\n      return;\n    }\n\n    const searchWords = textFiltered.split(\" \");\n\n    let tempfilteredListItems = listItems.filter(listItem => {\n      const itemKeywords = listItem.keywords;\n\n      let matches = 0;\n      searchWords.forEach(searchWord => {\n        if (itemKeywords.includes(searchWord)) {\n          matches++;\n        }\n      });\n\n      return matches >= searchWords.length;\n    });\n\n    const hlfilter = highlightFilter(textFiltered, [\"label\"]);\n    const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);\n\n    filteredListItems = filteredListItemsHighlighted;\n    closeIfMinCharsToSearchReached();\n    if (debug) {\n      const tEnd = performance.now();\n      console.log(\n        \"Search took \" +\n          (tEnd - tStart) +\n          \" milliseconds, found \" +\n          filteredListItems.length +\n          \" items\"\n      );\n    }\n  }\n\n  // $: text, search();\n\n  function selectListItem(listItem) {\n    if (debug) {\n      console.log(\"selectListItem\");\n    }\n    const newSelectedItem = listItem.item;\n    if (beforeChange(selectedItem, newSelectedItem)) {\n      selectedItem = newSelectedItem;\n    }\n  }\n\n  function selectItem() {\n    if (debug) {\n      console.log(\"selectItem\");\n    }\n    const listItem = filteredListItems[highlightIndex];\n    selectListItem(listItem);\n    close();\n  }\n\n  function up() {\n    if (debug) {\n      console.log(\"up\");\n    }\n\n    open();\n    if (highlightIndex > 0) highlightIndex--;\n    highlight();\n  }\n\n  function down() {\n    if (debug) {\n      console.log(\"down\");\n    }\n\n    open();\n    if (highlightIndex < filteredListItems.length - 1) highlightIndex++;\n    highlight();\n  }\n\n  function highlight() {\n    if (debug) {\n      console.log(\"highlight\");\n    }\n\n    const query = \".selected\";\n    if (debug) {\n      console.log(\"Seaching DOM element: \" + query + \" in \" + list);\n    }\n    const el = list.querySelector(query);\n    if (el) {\n      if (typeof el.scrollIntoViewIfNeeded === \"function\") {\n        if (debug) {\n          console.log(\"Scrolling selected item into view\");\n        }\n        el.scrollIntoViewIfNeeded();\n      } else {\n        if (debug) {\n          console.warn(\n            \"Could not scroll selected item into view, scrollIntoViewIfNeeded not supported\"\n          );\n        }\n      }\n    } else {\n      if (debug) {\n        console.warn(\"Selected item not found to scroll into view\");\n      }\n    }\n  }\n\n  function onListItemClick(listItem) {\n    if (debug) {\n      console.log(\"onListItemClick\");\n    }\n\n    selectListItem(listItem);\n    close();\n  }\n\n  function onDocumentClick(e) {\n    if (debug) {\n      console.log(\"onDocumentClick: \" + JSON.stringify(e.target));\n    }\n    if (e.target.closest(\".\" + uniqueId)) {\n      if (debug) {\n        console.log(\"onDocumentClick inside\");\n      }\n      // resetListToAllItemsAndOpen();\n      highlight();\n    } else {\n      if (debug) {\n        console.log(\"onDocumentClick outside\");\n      }\n      close();\n    }\n  }\n\n  function onKeyDown(e) {\n    if (debug) {\n      console.log(\"onKeyDown\");\n    }\n\n    let key = e.key;\n    if (key === \"Tab\" && e.shiftKey) key = \"ShiftTab\";\n    const fnmap = {\n      Tab: opened ? down.bind(this) : null,\n      ShiftTab: opened ? up.bind(this) : null,\n      ArrowDown: down.bind(this),\n      ArrowUp: up.bind(this),\n      Escape: onEsc.bind(this)\n    };\n    const fn = fnmap[key];\n    if (typeof fn === \"function\") {\n      e.preventDefault();\n      fn(e);\n    }\n  }\n\n  function onKeyPress(e) {\n    if (debug) {\n      console.log(\"onKeyPress\");\n    }\n\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      selectItem();\n    }\n  }\n\n  function onInput(e) {\n    if (debug) {\n      console.log(\"onInput\");\n    }\n\n    text = e.target.value;\n    search();\n    highlightIndex = 0;\n    open();\n  }\n\n  function onInputClick() {\n    if (debug) {\n      console.log(\"onInputClick\");\n    }\n    resetListToAllItemsAndOpen();\n  }\n\n  function onEsc(e) {\n    if (debug) {\n      console.log(\"onEsc\");\n    }\n\n    //if (text) return clear();\n    e.stopPropagation();\n    if (opened) {\n      input.focus();\n      close();\n    }\n  }\n\n  function onFocus() {\n    if (debug) {\n      console.log(\"onFocus\");\n    }\n\n    resetListToAllItemsAndOpen();\n  }\n\n  function resetListToAllItemsAndOpen() {\n    if (debug) {\n      console.log(\"resetListToAllItemsAndOpen\");\n    }\n\n    filteredListItems = listItems;\n\n    open();\n\n    // find selected item\n    if (selectedItem) {\n      if (debug) {\n        console.log(\n          \"Searching currently selected item: \" + JSON.stringify(selectedItem)\n        );\n      }\n      for (let i = 0; i < listItems.length; i++) {\n        const listItem = listItems[i];\n        if (debug) {\n          console.log(\"Item \" + i + \": \" + JSON.stringify(listItem));\n        }\n        if (selectedItem == listItem.item) {\n          highlightIndex = i;\n          if (debug) {\n            console.log(\n              \"Found selected item: \" + i + \": \" + JSON.stringify(listItem)\n            );\n          }\n          highlight();\n          break;\n        }\n      }\n    }\n  }\n\n  function open() {\n    if (debug) {\n      console.log(\"open\");\n    }\n\n    // check if the search text has more than the min chars required\n    if (isMinCharsToSearchReached()) {\n      return;\n    }\n\n    opened = true;\n  }\n\n  function close() {\n    if (debug) {\n      console.log(\"close\");\n    }\n    opened = false;\n\n    if (!text && selectFirstIfEmpty) {\n      highlightFilter = 0;\n      selectItem();\n    }\n  }\n\n  function isMinCharsToSearchReached() {\n    return (\n      minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch\n    );\n  }\n\n  function closeIfMinCharsToSearchReached() {\n    if (isMinCharsToSearchReached()) {\n      close();\n    }\n  }\n\n  function clear() {\n    if (debug) {\n      console.log(\"clear\");\n    }\n\n    text = \"\";\n    setTimeout(() => input.focus());\n  }\n\n  function onBlur() {\n    if (debug) {\n      console.log(\"onBlur\");\n    }\n    close();\n  }\n  // 'item number one'.replace(/(it)(.*)(nu)(.*)(one)/ig, '<b>$1</b>$2 <b>$3</b>$4 <b>$5</b>')\n  function highlightFilter(q, fields) {\n    const qs = \"(\" + q.trim().replace(/\\s/g, \")(.*)(\") + \")\";\n    const reg = new RegExp(qs, \"ig\");\n    let n = 1;\n    const len = qs.split(\")(\").length + 1;\n    let repl = \"\";\n    for (; n < len; n++) repl += n % 2 ? `<b>$${n}</b>` : `$${n}`;\n\n    return i => {\n      const newI = Object.assign({ highlighted: {} }, i);\n      if (fields) {\n        fields.forEach(f => {\n          if (!newI[f]) return;\n          newI.highlighted[f] = newI[f].replace(reg, repl);\n        });\n      }\n      return newI;\n    };\n  }\n</script>\n\n<style>\n  .autocomplete {\n    min-width: 200px;\n  }\n  .autocomplete * {\n    box-sizing: border-box;\n  }\n  .autocomplete-input {\n    font: inherit;\n    width: 100%;\n    height: 100%;\n    padding: 5px 11px;\n  }\n  .autocomplete-list {\n    background: #fff;\n    position: relative;\n    width: 100%;\n    overflow-y: auto;\n    z-index: 99;\n    padding: 10px 0;\n    top: 0px;\n    border: 1px solid #999;\n    max-height: calc(15 * (1rem + 10px) + 15px);\n    user-select: none;\n  }\n  .autocomplete-list:empty {\n    padding: 0;\n  }\n  .autocomplete-list-item {\n    padding: 5px 15px;\n    color: #333;\n    cursor: pointer;\n    line-height: 1;\n  }\n\n  .autocomplete-list-item:hover,\n  .autocomplete-list-item.selected {\n    background-color: #2e69e2;\n    color: #fff;\n  }\n  .autocomplete-list-item-no-results {\n    padding: 5px 15px;\n    color: #999;\n    line-height: 1;\n  }\n\n  .autocomplete-list.hidden {\n    display: none;\n  }\n</style>\n\n<div class=\"{className} autocomplete select is-fullwidth {uniqueId}\">\n  <input\n    type=\"text\"\n    class=\"input autocomplete-input\"\n    {placeholder}\n    {name}\n    {disabled}\n    {title}\n    bind:this={input}\n    bind:value={text}\n    on:input={onInput}\n    on:focus={onFocus}\n    on:keydown={onKeyDown}\n    on:click={onInputClick}\n    on:keypress={onKeyPress} />\n  <div\n    class=\"autocomplete-list {opened ? '' : 'hidden'} is-fullwidth\"\n    bind:this={list}>\n    {#if filteredListItems && filteredListItems.length > 0}\n      {#each filteredListItems as listItem, i}\n        {#if maxItemsToShowInList <= 0 || i < maxItemsToShowInList}\n          <div\n            class=\"autocomplete-list-item {i === highlightIndex ? 'selected' : ''}\"\n            on:click={() => onListItemClick(listItem)}>\n            {#if listItem.highlighted}\n              {@html listItem.highlighted.label}\n            {:else}\n              {@html listItem.label}\n            {/if}\n          </div>\n        {/if}\n      {/each}\n\n      {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}\n        <div class=\"autocomplete-list-item-no-results\">\n          ...{filteredListItems.length - maxItemsToShowInList} results not shown\n        </div>\n      {/if}\n    {:else if noResultsText}\n      <div class=\"autocomplete-list-item-no-results\">{noResultsText}</div>\n    {/if}\n  </div>\n</div>\n\n<svelte:window on:click={onDocumentClick} />\n",
    "<script>\n  import Month from './Month.svelte';\n  import NavBar from './NavBar.svelte';\n  import Popover from './Popover.svelte';\n  import { getMonths } from './lib/helpers';\n  import { formatDate, internationalize } from 'timeUtils';\n  import { keyCodes, keyCodesArray } from './lib/keyCodes';\n  import { onMount, createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n  const today = new Date();\n\n  let popover;\n\n  export let format = '#{m}/#{d}/#{Y}';\n  export let start = new Date(1987, 9, 29);\n  export let end = new Date(2020, 9, 29);\n  export let selected = today;\n  export let dateChosen = false;\n  export let trigger = null;\n  export let selectableCallback = null;\n  export let weekStart = 0;\n  export let daysOfWeek = [\n    ['Sunday', 'Sun'],\n    ['Monday', 'Mon'],\n    ['Tuesday', 'Tue'],\n    ['Wednesday', 'Wed'],\n    ['Thursday', 'Thu'],\n    ['Friday', 'Fri'],\n    ['Saturday', 'Sat'],\n  ];\n  export let monthsOfYear = [\n    ['January', 'Jan'],\n    ['February', 'Feb'],\n    ['March', 'Mar'],\n    ['April', 'Apr'],\n    ['May', 'May'],\n    ['June', 'Jun'],\n    ['July', 'Jul'],\n    ['August', 'Aug'],\n    ['September', 'Sep'],\n    ['October', 'Oct'],\n    ['November', 'Nov'],\n    ['December', 'Dec'],\n  ];\n\n  export let style = '';\n\n  // theming variables:\n  export let buttonBackgroundColor = '#fff';\n  export let buttonBorderColor = '#eee';\n  export let buttonTextColor = '#333';\n  export let highlightColor = '#f7901e';\n  export let dayBackgroundColor = 'none';\n  export let dayTextColor = '#4a4a4a';\n  export let dayHighlightedBackgroundColor = '#efefef';\n  export let dayHighlightedTextColor = '#4a4a4a';\n\n  internationalize({ daysOfWeek, monthsOfYear });\n  let sortedDaysOfWeek =\n    weekStart === 0\n      ? daysOfWeek\n      : (() => {\n          let dow = daysOfWeek.slice();\n          dow.push(dow.shift());\n          return dow;\n        })();\n\n  let highlighted = today;\n  let shouldShakeDate = false;\n  let shakeHighlightTimeout;\n  let month = today.getMonth();\n  let year = today.getFullYear();\n\n  let isOpen = false;\n  let isClosing = false;\n\n  today.setHours(0, 0, 0, 0);\n\n  function assignmentHandler(formatted) {\n    if (!trigger) return;\n    trigger.innerHTML = formatted;\n  }\n\n  $: months = getMonths(start, end, selectableCallback, weekStart);\n\n  let monthIndex = 0;\n  $: {\n    monthIndex = 0;\n    for (let i = 0; i < months.length; i += 1) {\n      if (months[i].month === month && months[i].year === year) {\n        monthIndex = i;\n      }\n    }\n  }\n  $: visibleMonth = months[monthIndex];\n\n  $: visibleMonthId = year + month / 100;\n  $: lastVisibleDate = visibleMonth.weeks[visibleMonth.weeks.length - 1].days[6].date;\n  $: firstVisibleDate = visibleMonth.weeks[0].days[0].date;\n  $: canIncrementMonth = monthIndex < months.length - 1;\n  $: canDecrementMonth = monthIndex > 0;\n  $: wrapperStyle = `\n    --button-background-color: ${buttonBackgroundColor};\n    --button-border-color: ${buttonBorderColor};\n    --button-text-color: ${buttonTextColor};\n    --highlight-color: ${highlightColor};\n    --day-background-color: ${dayBackgroundColor};\n    --day-text-color: ${dayTextColor};\n    --day-highlighted-background-color: ${dayHighlightedBackgroundColor};\n    --day-highlighted-text-color: ${dayHighlightedTextColor};\n    ${style}\n  `;\n\n  export let formattedSelected;\n  $: {\n    formattedSelected = typeof format === 'function' ? format(selected) : formatDate(selected, format);\n  }\n\n  onMount(() => {\n    month = selected.getMonth();\n    year = selected.getFullYear();\n  });\n\n  function changeMonth(selectedMonth) {\n    month = selectedMonth;\n    highlighted = new Date(year, month, 1);\n  }\n\n  function incrementMonth(direction, day = 1) {\n    if (direction === 1 && !canIncrementMonth) return;\n    if (direction === -1 && !canDecrementMonth) return;\n    let current = new Date(year, month, 1);\n    current.setMonth(current.getMonth() + direction);\n    month = current.getMonth();\n    year = current.getFullYear();\n    highlighted = new Date(year, month, day);\n  }\n\n  function getDefaultHighlighted() {\n    return new Date(selected);\n  }\n\n  const getDay = (m, d, y) => {\n    let theMonth = months.find(aMonth => aMonth.month === m && aMonth.year === y);\n    if (!theMonth) return null;\n    // eslint-disable-next-line\n    for (let i = 0; i < theMonth.weeks.length; ++i) {\n      // eslint-disable-next-line\n      for (let j = 0; j < theMonth.weeks[i].days.length; ++j) {\n        let aDay = theMonth.weeks[i].days[j];\n        if (aDay.month === m && aDay.day === d && aDay.year === y) return aDay;\n      }\n    }\n    return null;\n  };\n\n  function incrementDayHighlighted(amount) {\n    let proposedDate = new Date(highlighted);\n    proposedDate.setDate(highlighted.getDate() + amount);\n    let correspondingDayObj = getDay(proposedDate.getMonth(), proposedDate.getDate(), proposedDate.getFullYear());\n    if (!correspondingDayObj || !correspondingDayObj.isInRange) return;\n    highlighted = proposedDate;\n    if (amount > 0 && highlighted > lastVisibleDate) {\n      incrementMonth(1, highlighted.getDate());\n    }\n    if (amount < 0 && highlighted < firstVisibleDate) {\n      incrementMonth(-1, highlighted.getDate());\n    }\n  }\n\n  function checkIfVisibleDateIsSelectable(date) {\n    const proposedDay = getDay(date.getMonth(), date.getDate(), date.getFullYear());\n    return proposedDay && proposedDay.selectable;\n  }\n\n  function shakeDate(date) {\n    clearTimeout(shakeHighlightTimeout);\n    shouldShakeDate = date;\n    shakeHighlightTimeout = setTimeout(() => {\n      shouldShakeDate = false;\n    }, 700);\n  }\n\n  function assignValueToTrigger(formatted) {\n    assignmentHandler(formatted);\n  }\n\n  function registerSelection(chosen) {\n    if (!checkIfVisibleDateIsSelectable(chosen)) return shakeDate(chosen);\n    // eslint-disable-next-line\n    close();\n    selected = chosen;\n    dateChosen = true;\n    assignValueToTrigger(formattedSelected);\n    return dispatch('dateSelected', { date: chosen });\n  }\n\n  function handleKeyPress(evt) {\n    if (keyCodesArray.indexOf(evt.keyCode) === -1) return;\n    evt.preventDefault();\n    switch (evt.keyCode) {\n      case keyCodes.left:\n        incrementDayHighlighted(-1);\n        break;\n      case keyCodes.up:\n        incrementDayHighlighted(-7);\n        break;\n      case keyCodes.right:\n        incrementDayHighlighted(1);\n        break;\n      case keyCodes.down:\n        incrementDayHighlighted(7);\n        break;\n      case keyCodes.pgup:\n        incrementMonth(-1);\n        break;\n      case keyCodes.pgdown:\n        incrementMonth(1);\n        break;\n      case keyCodes.escape:\n        // eslint-disable-next-line\n        close();\n        break;\n      case keyCodes.enter:\n        registerSelection(highlighted);\n        break;\n      default:\n        break;\n    }\n  }\n\n  function registerClose() {\n    document.removeEventListener('keydown', handleKeyPress);\n    dispatch('close');\n  }\n\n  function close() {\n    popover.close();\n    registerClose();\n  }\n\n  function registerOpen() {\n    highlighted = getDefaultHighlighted();\n    month = selected.getMonth();\n    year = selected.getFullYear();\n    document.addEventListener('keydown', handleKeyPress);\n    dispatch('open');\n  }\n</script>\n\n<style>\n  .datepicker {\n    display: inline-block;\n    margin: 0 auto;\n    text-align: center;\n    overflow: visible;\n  }\n\n  .calendar-button {\n    padding: 10px 20px;\n    border: 1px solid var(--button-border-color);\n    display: block;\n    text-align: center;\n    width: 300px;\n    text-decoration: none;\n    cursor: pointer;\n    background: var(--button-background-color);\n    color: var(--button-text-color);\n    border-radius: 7px;\n    box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.1);\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n\n  .calendar {\n    box-sizing: border-box;\n    position: relative;\n    overflow: hidden;\n    user-select: none;\n    width: 100vw;\n    padding: 10px;\n    padding-top: 0;\n  }\n\n  @media (min-width: 480px) {\n    .calendar {\n      height: auto;\n      width: 238px;\n      max-width: 100%;\n    }\n  }\n\n  .legend {\n    color: #4a4a4a;\n    padding-top: 3px;\n    margin-bottom: 5px;\n  }\n\n  .legend span {\n    width: 14.285714%;\n    display: inline-block;\n    text-align: center;\n  }\n</style>\n\n<div class=\"datepicker\" class:open={isOpen} class:closing={isClosing} style={wrapperStyle}>\n  <Popover\n    bind:this={popover}\n    bind:open={isOpen}\n    bind:shrink={isClosing}\n    {trigger}\n    on:opened={registerOpen}\n    on:closed={registerClose}>\n    <div slot=\"trigger\">\n      <slot {selected} {formattedSelected}>\n        {#if !trigger}\n          <button class=\"calendar-button\" type=\"button\">{formattedSelected}</button>\n        {/if}\n      </slot>\n    </div>\n    <div slot=\"contents\">\n      <div class=\"calendar\">\n        <NavBar\n          {month}\n          {year}\n          {canIncrementMonth}\n          {canDecrementMonth}\n          {start}\n          {end}\n          {monthsOfYear}\n          on:monthSelected={e => changeMonth(e.detail)}\n          on:incrementMonth={e => incrementMonth(e.detail)} />\n        <div class=\"legend\">\n          {#each sortedDaysOfWeek as day}\n            <span>{day[1]}</span>\n          {/each}\n        </div>\n        <Month\n          {visibleMonth}\n          {selected}\n          {highlighted}\n          {shouldShakeDate}\n          id={visibleMonthId}\n          on:dateSelected={e => registerSelection(e.detail)} />\n      </div>\n    </div>\n  </Popover>\n</div>\n",
    "<script>\n  import Week from './Week.svelte';\n\n  export let id;\n  export let visibleMonth;\n  export let selected;\n  export let highlighted;\n  export let shouldShakeDate;\n\n  let lastId = id;\n  let direction;\n\n  $: {\n    direction = lastId < id ? 1 : -1;\n    lastId = id;\n  }\n</script>\r\n\r\n<div class=\"month-container\">\r\n  {#each visibleMonth.weeks as week (week.id) }\r\n    <Week \r\n      days={week.days} \r\n      {selected} \r\n      {highlighted} \r\n      {shouldShakeDate} \r\n      {direction}\r\n      on:dateSelected \r\n    />\r\n  {/each}\r\n</div>\r\n\r\n<style>\r\n  .month-container { \r\n    width: 100%;\r\n    display: -ms-grid;\r\n    display: grid;\r\n    -ms-grid-columns: 1fr;\r\n    -ms-grid-rows: 1fr;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { createEventDispatcher } from 'svelte';\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let month;\r\n  export let year;\r\n  export let start;\r\n  export let end;\r\n  export let canIncrementMonth;\r\n  export let canDecrementMonth;\r\n  export let monthsOfYear;\r\n\r\n  let monthSelectorOpen = false;\r\n  let availableMonths;\r\n\r\n  $: {\r\n    let isOnLowerBoundary = start.getFullYear() === year;\r\n    let isOnUpperBoundary = end.getFullYear() === year;\r\n    availableMonths = monthsOfYear.map((m, i) => {\r\n      return Object.assign(\r\n        {},\r\n        {\r\n          name: m[0],\r\n          abbrev: m[1],\r\n        },\r\n        {\r\n          selectable:\r\n            (!isOnLowerBoundary && !isOnUpperBoundary) ||\r\n            ((!isOnLowerBoundary || i >= start.getMonth()) && (!isOnUpperBoundary || i <= end.getMonth())),\r\n        },\r\n      );\r\n    });\r\n  }\r\n\r\n  function toggleMonthSelectorOpen() {\r\n    monthSelectorOpen = !monthSelectorOpen;\r\n  }\r\n\r\n  function monthSelected(event, { m, i }) {\r\n    event.stopPropagation();\r\n    if (!m.selectable) return;\r\n    dispatch('monthSelected', i);\r\n    toggleMonthSelectorOpen();\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .heading-section {\r\n    font-size: 16px;\r\n    padding-top: 13px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    color: #3d4548;\r\n    font-weight: bold;\r\n  }\r\n  .label {\r\n    cursor: pointer;\r\n  }\r\n  .month-selector {\r\n    position: absolute;\r\n    top: 75px;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #fff;\r\n    transition: all 300ms;\r\n    transform: scale(1.2);\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    z-index: 1;\r\n    text-align: center;\r\n  }\r\n  .month-selector.open {\r\n    transform: scale(1);\r\n    visibility: visible;\r\n    opacity: 1;\r\n  }\r\n  .month-selector--month {\r\n    width: 31.333%;\r\n    margin: 0.5%;\r\n    height: 23%;\r\n    display: inline-block;\r\n    color: #4a4a4a;\r\n    border: 1px solid #efefef;\r\n    opacity: 0.2;\r\n  }\r\n  .month-selector--month.selectable {\r\n    opacity: 1;\r\n  }\r\n  .month-selector--month.selectable:hover {\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 3px rgba(0, 0, 0, 0.15);\r\n  }\r\n  .month-selector--month.selected {\r\n    background: var(--highlight-color);\r\n    color: #fff;\r\n  }\r\n  .month-selector--month:before {\r\n    content: ' ';\r\n    display: inline-block;\r\n    height: 100%;\r\n    vertical-align: middle;\r\n  }\r\n  .month-selector--month span {\r\n    vertical-align: middle;\r\n    display: inline-block;\r\n  }\r\n\r\n  .control {\r\n    padding: 0 8px;\r\n    opacity: 0.2;\r\n    transform: translateY(3px);\r\n  }\r\n\r\n  .control.enabled {\r\n    opacity: 1;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .arrow {\r\n    display: inline-block;\r\n    width: 18px;\r\n    height: 18px;\r\n    border-style: solid;\r\n    border-color: #a9a9a9;\r\n    border-width: 0;\r\n    border-bottom-width: 2px;\r\n    border-right-width: 2px;\r\n  }\r\n\r\n  .arrow.right {\r\n    transform: rotate(-45deg);\r\n    -webkit-transform: rotate(-45deg);\r\n  }\r\n\r\n  .arrow.left {\r\n    transform: rotate(135deg);\r\n    -webkit-transform: rotate(135deg);\r\n  }\r\n</style>\r\n\r\n<div class=\"cal-title\">\r\n  <div class=\"heading-section\">\r\n    <div class=\"control\" class:enabled={canDecrementMonth} on:click={() => dispatch('incrementMonth', -1)}>\r\n      <i class=\"arrow left\" />\r\n    </div>\r\n    <div class=\"label\" on:click={toggleMonthSelectorOpen}>{monthsOfYear[month][0]} {year}</div>\r\n    <div class=\"control\" class:enabled={canIncrementMonth} on:click={() => dispatch('incrementMonth', 1)}>\r\n      <i class=\"arrow right\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"month-selector\" class:open={monthSelectorOpen}>\r\n    {#each availableMonths as monthDefinition, index}\r\n      <div\r\n        class=\"month-selector--month\"\r\n        class:selected={index === month}\r\n        class:selectable={monthDefinition.selectable}\r\n        on:click={e => monthSelected(e, { m: monthDefinition, i: index })}>\r\n        <span>{monthDefinition.abbrev}</span>\r\n      </div>\r\n    {/each}\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import { onMount, createEventDispatcher, tick } from 'svelte';\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  let once = (el, evt, cb) => {\r\n    function handler() {\r\n      cb.apply(this, arguments);\r\n      el.removeEventListener(evt, handler);\r\n    }\r\n    el.addEventListener(evt, handler);\r\n  };\r\n\r\n  let popover;\r\n  let w;\r\n  let triggerContainer;\r\n  let contentsAnimated;\r\n  let contentsWrapper;\r\n  let translateY = 0;\r\n  let translateX = 0;\r\n\r\n  export let open = false;\r\n  export let shrink;\r\n  export let trigger;\r\n  export const close = () => {\r\n    shrink = true;\r\n    once(contentsAnimated, 'animationend', () => {\r\n      shrink = false;\r\n      open = false;\r\n      dispatch('closed');\r\n    });\r\n  };\r\n\r\n  function checkForFocusLoss(evt) {\r\n    if (!open) return;\r\n    let el = evt.target;\r\n    // eslint-disable-next-line\r\n    do {\r\n      if (el === popover) return;\r\n      // eslint-disable-next-line\r\n    } while ((el = el.parentNode));\r\n    close();\r\n  }\r\n\r\n  onMount(() => {\r\n    document.addEventListener('click', checkForFocusLoss);\r\n    if (!trigger) return;\r\n    triggerContainer.appendChild(trigger.parentNode.removeChild(trigger));\r\n\r\n    // eslint-disable-next-line\r\n    return () => {\r\n      document.removeEventListener('click', checkForFocusLoss);\r\n    };\r\n  });\r\n\r\n  const getDistanceToEdges = async () => {\r\n    if (!open) {\r\n      open = true;\r\n    }\r\n    await tick();\r\n    let rect = contentsWrapper.getBoundingClientRect();\r\n    return {\r\n      top: rect.top + -1 * translateY,\r\n      bottom: window.innerHeight - rect.bottom + translateY,\r\n      left: rect.left + -1 * translateX,\r\n      right: document.body.clientWidth - rect.right + translateX,\r\n    };\r\n  };\r\n\r\n  const getTranslate = async () => {\r\n    let dist = await getDistanceToEdges();\r\n    let x;\r\n    let y;\r\n    if (w < 480) {\r\n      y = dist.bottom;\r\n    } else if (dist.top < 0) {\r\n      y = Math.abs(dist.top);\r\n    } else if (dist.bottom < 0) {\r\n      y = dist.bottom;\r\n    } else {\r\n      y = 0;\r\n    }\r\n    if (dist.left < 0) {\r\n      x = Math.abs(dist.left);\r\n    } else if (dist.right < 0) {\r\n      x = dist.right;\r\n    } else {\r\n      x = 0;\r\n    }\r\n    return { x, y };\r\n  };\r\n\r\n  const doOpen = async () => {\r\n    const { x, y } = await getTranslate();\r\n\r\n    translateX = x;\r\n    translateY = y;\r\n    open = true;\r\n\r\n    dispatch('opened');\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .sc-popover {\r\n    position: relative;\r\n  }\r\n\r\n  .contents-wrapper {\r\n    transform: translate(-50%, -50%);\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transition: none;\r\n    z-index: 2;\r\n    display: none;\r\n  }\r\n\r\n  .contents {\r\n    background: #fff;\r\n    box-shadow: 0px 10px 26px rgba(0, 0, 0, 0.4);\r\n    opacity: 0.8;\r\n    padding-top: 0;\r\n    display: none;\r\n    animation: grow 200ms forwards cubic-bezier(0.92, 0.09, 0.18, 1.05);\r\n  }\r\n\r\n  .contents-inner {\r\n    animation: fadeIn 400ms forwards;\r\n  }\r\n\r\n  .contents-wrapper.visible {\r\n    display: block;\r\n    top: 169px;\r\n  }\r\n\r\n  .contents-wrapper.visible .contents {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n    display: block;\r\n  }\r\n\r\n  .contents-wrapper.shrink .contents {\r\n    animation: shrink 150ms forwards cubic-bezier(0.92, 0.09, 0.18, 1.05);\r\n  }\r\n\r\n  @keyframes grow {\r\n    0% {\r\n      transform: scale(0.9, 0.1);\r\n      opacity: 0;\r\n    }\r\n    30% {\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n\r\n  @keyframes shrink {\r\n    0% {\r\n      transform: scale(1);\r\n      opacity: 1;\r\n    }\r\n    70% {\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      opacity: 0;\r\n      transform: scale(0.9, 0.1);\r\n    }\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    0% {\r\n      opacity: 0;\r\n    }\r\n    50% {\r\n      opacity: 0;\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n  }\r\n</style>\r\n\r\n<svelte:window bind:innerWidth={w} />\r\n<div class=\"sc-popover\" bind:this={popover}>\r\n  <div class=\"trigger\" on:click={doOpen} bind:this={triggerContainer}>\r\n    <slot name=\"trigger\" />\r\n  </div>\r\n  <div\r\n    class=\"contents-wrapper\"\r\n    class:visible={open}\r\n    class:shrink\r\n    style=\"transform: translate(-50%,-50%) translate({translateX}px, {translateY}px)\"\r\n    bind:this={contentsWrapper}>\r\n    <div class=\"contents\" bind:this={contentsAnimated}>\r\n      <div class=\"contents-inner\">\r\n        <slot name=\"contents\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
    "<script>\n  import { areDatesEquivalent } from './lib/helpers';\n  import { fly, fade } from 'svelte/transition';\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let days;\n  export let selected;\n  export let highlighted;\n  export let shouldShakeDate;\n  export let direction;\n</script>\r\n\r\n<div \r\n  class=\"week\" \r\n  in:fly|local={{ x: direction * 50, duration: 180, delay: 90 }}\r\n  out:fade|local={{ duration: 180 }}\r\n>\r\n  {#each days as day}\r\n    <div \r\n      class=\"day\" \r\n      class:outside-month={!day.partOfMonth}\r\n      class:is-today={day.isToday}\r\n      class:is-disabled={!day.selectable}\r\n    >\r\n      <button \r\n        class=\"day--label\" \r\n        class:selected={areDatesEquivalent(day.date, selected)}\r\n        class:highlighted={areDatesEquivalent(day.date, highlighted)}\r\n        class:shake-date={shouldShakeDate && areDatesEquivalent(day.date, shouldShakeDate)}\r\n        class:disabled={!day.selectable}\r\n        type=\"button\"\r\n        on:click={() => dispatch('dateSelected', day.date)}\r\n      >\r\n        {day.date.getDate()}\r\n      </button>\r\n    </div>\r\n  {/each}\r\n</div>\r\n\r\n<style>\r\n  .week { \r\n    padding: 0;\r\n    margin: 0;\r\n    display: -webkit-box;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: -webkit-flex;\r\n    display: flex;\r\n    flex-flow: row;\r\n    -webkit-flex-flow: row;\r\n    justify-content: space-around;\r\n    -ms-grid-column: 1;\r\n    grid-column: 1; \r\n  }\r\n  .week:nth-child(6n + 1) { \r\n    -ms-grid-row: 1; \r\n    grid-row: 1; \r\n  }\r\n  .week:nth-child(6n + 2) { \r\n    -ms-grid-row: 2; \r\n    grid-row: 2; \r\n  }\r\n  .week:nth-child(6n + 3) { \r\n    -ms-grid-row: 3; \r\n    grid-row: 3; \r\n  }\r\n  .week:nth-child(6n + 4) { \r\n    -ms-grid-row: 4; \r\n    grid-row: 4; \r\n  }\r\n  .week:nth-child(6n + 5) { \r\n    -ms-grid-row: 5; \r\n    grid-row: 5; \r\n  }\r\n  .week:nth-child(6n + 6) { \r\n    -ms-grid-row: 6; \r\n    grid-row: 6; \r\n  }\r\n  .day { \r\n    margin: 2px;\r\n    color: var(--day-text-color);\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-size: 16px;\r\n    flex: 1 0 auto;\r\n    height: auto;\r\n    display: flex; \r\n    flex-basis: 0;\r\n  }\r\n  .day.outside-month, \r\n  .day.is-disabled { \r\n    opacity: 0.35;\r\n  }\r\n  .day:before { \r\n    content: '';\r\n    float: left;\r\n    padding-top: 100%;\r\n  }\r\n  .day--label { \r\n    color: var(--day-text-color);\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    position: relative;\r\n    border: 1px solid #fff;\r\n    border-radius: 50%; \r\n    margin: 10%;\r\n    padding: 0;\r\n    align-items: center;\r\n    background: var(--day-background-color);\r\n    cursor: pointer;\r\n    transition: all 100ms linear;\r\n    font-weight: normal;\r\n  }\r\n  .day--label.disabled { \r\n    cursor: default;\r\n  }\r\n  @media (min-width: 480px) { \r\n    .day--label.highlighted,\r\n    .day--label:not(.disabled):hover { \r\n      background: var(--day-highlighted-background-color);\r\n      border-color: var(--day-highlighted-background-color);\r\n      color: var(--day-highlighted-text-color);\r\n    }\r\n  }\r\n  .day--label.shake-date { \r\n    animation: shake 0.4s 1 linear;\r\n  }\r\n  .day--label.selected:hover,\r\n  .day--label.selected,\r\n  .day--label:active:not(.disabled) { \r\n    background-color: var(--highlight-color);\r\n    border-color: var(--highlight-color);\r\n    color: #fff;\r\n  }\r\n  .day.is-today .day--label, \r\n  .day.is-today .day--label:hover { \r\n    opacity: 1; \r\n    background: none;\r\n    border-color: var(--highlight-color);\r\n    color: #000;\r\n  }\r\n\r\n  @keyframes shake {\r\n    0% { transform: translate(7px); }\r\n    20% { transform: translate(-7px); }\r\n    40% { transform: translate(3px); }\r\n    60% { transform: translate(-3px); }\r\n    80% { transform: translate(1px); }\r\n    100% { transform: translate(0px); }\r\n  }\r\n</style>\r\n",
    "<script>\n  export let title = null;\n  export let viewBox;\n</script>\n\n<style>\n  svg {\n    stroke: currentColor;\n    fill: currentColor;\n    stroke-width: 0;\n    width: 100%;\n    height: auto;\n    max-height: 100%;\n  }  \n</style>\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" {viewBox}>\n  {#if title}\n    <title>{title}</title>\n  {/if}\n  <slot />\n</svg>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import MapBox from './MapBox.svelte';\n\n  import {\n    sensorMap,\n    times,\n    stats,\n    signalType,\n    encoding,\n    currentSensor,\n    currentDate,\n    currentLevel,\n    currentRegion,\n    currentZone,\n    currentRegionName,\n    regionSliceCache,\n    timeSliceCache,\n    currentData,\n    regionData,\n    mounted,\n    mapFirstLoaded,\n    yesterday,\n    customDataView,\n  } from './stores.js';\n\n  const ENDPOINT = 'https://api.covidcast.cmu.edu/epidata/api.php?source=covidcast&cached=true&time_type=day';\n  const ENDPOINT_META = 'https://api.covidcast.cmu.edu/epidata/api.php?source=covidcast_meta&cached=true';\n\n  // Fix for IE: https://stackoverflow.com/a/21712356\n  let isIE = window.document.documentMode;\n\n  let error = null;\n  let graphShowStatus = false;\n  let changingSensor = false;\n  let levelChangedWhenSensorChanged = false;\n  let dateChangedWhenSensorChanged = false;\n  let firstLoaded = true;\n\n  function callAPI(id, signal, level, date, region) {\n    return fetch(\n      ENDPOINT +\n        '&data_source=' +\n        id +\n        '&signal=' +\n        signal +\n        '&geo_type=' +\n        level +\n        '&time_values=' +\n        date +\n        '&geo_value=' +\n        region,\n    ).then(d => d.json());\n  }\n\n  // combining json with same geolocations but different value properties\n  // json1 value is 7 day average, json2 value is single count\n  function extend(json1, json2) {\n    let newEpiData = [];\n    let data1 = json1.epidata;\n    let data2 = json2.epidata;\n    for (let i = 0; i < data1.length; i++) {\n      let avg = Math.max(0, data1[i].value);\n      let count = Math.max(0, data2[i].value);\n      data1[i].avg = avg;\n      delete data1[i].value;\n      data1[i].count = count;\n      newEpiData.push(data1[i]);\n    }\n    return newEpiData;\n  }\n\n  function check_wip(signalName, otherSignal) {\n    if (signalName.match(/wip/)) {\n      return 'wip_' + otherSignal.replace('incidence', 'incid');\n    }\n    return otherSignal;\n  }\n  // We cache API calls for all regions at a given time and update currentData.\n  function updateRegionSliceCache(sensor, level, date, reason = 'unspecified') {\n    let sEntry = $sensorMap.get(sensor);\n    if (!$mounted || !sEntry.levels.includes(level) || date > $times.get(sensor)[1] || reason === 'level change')\n      return;\n    let cacheEntry = $regionSliceCache.get(sensor + level + date);\n    if (!cacheEntry) {\n      callAPI(sEntry.id, sEntry.signal, level, date, '*').then(d => {\n        if (d.result < 0 || d.message.includes('no results')) {\n          currentData.set([]);\n          regionSliceCache.update(m => m.set(sensor + level + date, []));\n        } else {\n          const deathsRegex = /deaths_/;\n          const casesRegex = /confirmed_/;\n          // deaths needs both count and ratio\n          if (sEntry.signal.match(deathsRegex)) {\n            // deaths_incidence_prop\n            if (sEntry.signal === 'deaths_7dav_incidence_prop') {\n              callAPI(sEntry.id, check_wip(sEntry.signal, 'deaths_incidence_prop'), level, date, '*').then(d1 => {\n                let extended = extend(d, d1);\n                currentData.set(extended);\n                regionSliceCache.update(m => m.set(sensor + level + date, extended));\n              });\n            } else {\n              callAPI(sEntry.id, check_wip(sEntry.signal, 'deaths_incidence_num'), level, date, '*').then(d1 => {\n                let extended = extend(d, d1);\n                currentData.set(extended);\n                regionSliceCache.update(m => m.set(sensor + level + date, extended));\n              });\n            }\n          }\n          // cases needs both count and ratio\n          else if (sEntry.signal.match(casesRegex)) {\n            // confirmed_incidence_prop\n            if (sEntry.signal === 'confirmed_7dav_incidence_prop') {\n              callAPI(sEntry.id, check_wip(sEntry.signal, 'confirmed_incidence_prop'), level, date, '*').then(d1 => {\n                let extended = extend(d, d1);\n                currentData.set(extended);\n                regionSliceCache.update(m => m.set(sensor + level + date, extended));\n              });\n            } else {\n              callAPI(sEntry.id, check_wip(sEntry.signal, 'confirmed_incidence_num'), level, date, '*').then(d1 => {\n                let extended = extend(d, d1);\n                currentData.set(extended);\n                regionSliceCache.update(m => m.set(sensor + level + date, extended));\n              });\n            }\n          }\n          // everything else\n          else {\n            currentData.set(d.epidata);\n            regionSliceCache.update(m => m.set(sensor + level + date, d.epidata));\n          }\n        }\n      });\n    } else {\n      currentData.set(cacheEntry);\n    }\n  }\n\n  // We cache API calls for all time at a given region and update regionData.\n  function updateTimeSliceCache(sensor, level, region) {\n    let sEntry = $sensorMap.get(sensor);\n    if (!$mounted) return;\n    if (!region) {\n      regionData.set([]);\n      return;\n    }\n\n    // check if the currentRegion has data on the current date\n    const checkIfCurrentRegionHasDataOnCurrentDate = (regionData = []) => {\n      let flag = false;\n      regionData.forEach(item => {\n        if (item.time_value == $currentDate) {\n          flag = true;\n        }\n      });\n      return flag;\n    };\n\n    let cacheEntry = $timeSliceCache.get(sensor + level + region);\n    if (!cacheEntry) {\n      callAPI(sEntry.id, sEntry.signal, level, '20100101-20500101', region).then(d => {\n        // creating deepcopy to avoid tampering with the data stored in cache\n        if (!checkIfCurrentRegionHasDataOnCurrentDate(d.epidata)) {\n          currentRegion.set('');\n          currentRegionName.set('');\n          timeSliceCache.update(m => m.set(sensor + level + region, d.epidata));\n        } else {\n          const epi_data = JSON.parse(JSON.stringify(d.epidata));\n          regionData.set(d.epidata);\n          timeSliceCache.update(m => m.set(sensor + level + region, epi_data));\n        }\n      });\n    } else {\n      regionData.set(cacheEntry);\n      if (!checkIfCurrentRegionHasDataOnCurrentDate(cacheEntry)) {\n        currentRegion.set('');\n        currentRegionName.set('');\n      }\n    }\n  }\n\n  // Since we don't want multiple updates, but currentSensor changes can update // the level and date, we have flags that prevent the async updates.\n  currentSensor.subscribe(s => {\n    if (!$mounted) return;\n\n    let l = $currentLevel;\n    let minDate = $times.get(s)[0],\n      maxDate = $times.get(s)[1];\n    let date = minDate;\n    if ($currentDate >= minDate && $currentDate <= maxDate) {\n      date = $currentDate;\n    } else if ($currentDate > maxDate) {\n      date = maxDate;\n    }\n\n    if (!$sensorMap.get(s).levels.includes($currentLevel)) {\n      l = $sensorMap.get(s).levels[0];\n      levelChangedWhenSensorChanged = true;\n      currentRegion.set('');\n      currentRegionName.set('');\n      currentLevel.set(l);\n    } else {\n      updateTimeSliceCache(s, l, $currentRegion);\n    }\n    if (date !== $currentDate) {\n      dateChangedWhenSensorChanged = true;\n      currentDate.set(date);\n    }\n\n    $sensorMap.get(s).official ? signalType.set('value') : '';\n\n    updateRegionSliceCache(s, l, date, 'sensor-change');\n  });\n\n  currentLevel.subscribe(l => {\n    if (levelChangedWhenSensorChanged) {\n      levelChangedWhenSensorChanged = false;\n    } else {\n      if ($mounted) {\n        currentRegion.set('');\n        currentRegionName.set('');\n      }\n      updateRegionSliceCache($currentSensor, l, $currentDate, 'level-change');\n    }\n  });\n\n  currentDate.subscribe(d => {\n    dateChangedWhenSensorChanged\n      ? (dateChangedWhenSensorChanged = false)\n      : updateRegionSliceCache($currentSensor, $currentLevel, d, 'date-change');\n  });\n\n  currentRegion.subscribe(r => {\n    updateTimeSliceCache($currentSensor, $currentLevel, r);\n    if (firstLoaded && r !== '') {\n      toggleGraphShowStatus(null, false);\n      firstLoaded = false;\n    } else if (r) {\n      toggleGraphShowStatus(null, true);\n    } else {\n      toggleGraphShowStatus(null, false);\n    }\n  });\n\n  onMount(_ => {\n    fetch(ENDPOINT_META)\n      .then(d => d.json())\n      .then(meta => {\n        let timeMap = new Map();\n        let statsMap = new Map();\n\n        Array.from($sensorMap.keys()).forEach(sensorKey => {\n          let sEntry = $sensorMap.get(sensorKey);\n          let matchedMeta;\n          // need to chagne mean / std for counts\n          if (sEntry.signal.match(/num/)) {\n            const regions = sEntry.levels;\n            regions.forEach(region => {\n              matchedMeta = meta.epidata.find(\n                d =>\n                  d.data_source === sEntry.id &&\n                  d.signal === sEntry.signal &&\n                  d.time_type === 'day' &&\n                  d.geo_type === region,\n              );\n              if (matchedMeta) {\n                if (matchedMeta.max_time > yesterday) {\n                  matchedMeta.max_time = yesterday;\n                }\n\n                timeMap.set(sensorKey, [matchedMeta.min_time, matchedMeta.max_time]);\n\n                statsMap.set(sensorKey + '_' + region, {\n                  mean: matchedMeta.mean_value,\n                  std: matchedMeta.stdev_value,\n                });\n              } else {\n                // If no metadata, use information from sensors\n                // Used for testing new data\n                timeMap.set(sensorKey, [sEntry.minTime, sEntry.maxTime]);\n                if (region === 'county') {\n                  statsMap.set(sensorKey + '_' + region, {\n                    mean: sEntry.county_mean,\n                    std: sEntry.county_std,\n                  });\n                } else if (region === 'msa') {\n                  statsMap.set(sensorKey + '_' + region, {\n                    mean: sEntry.msa_mean,\n                    std: sEntry.msa_std,\n                  });\n                } else {\n                  statsMap.set(sensorKey + '_' + region, {\n                    mean: sEntry.state_mean,\n                    std: sEntry.state_std,\n                  });\n                }\n              }\n            });\n          } else {\n            matchedMeta = meta.epidata.find(\n              d => d.data_source === sEntry.id && d.signal === sEntry.signal && d.time_type === 'day',\n            );\n            if (matchedMeta) {\n              if (matchedMeta.max_time > yesterday) {\n                matchedMeta.max_time = yesterday;\n              }\n\n              timeMap.set(sensorKey, [matchedMeta.min_time, matchedMeta.max_time]);\n\n              statsMap.set(sensorKey, {\n                mean: matchedMeta.mean_value,\n                std: matchedMeta.stdev_value,\n              });\n            } else {\n              // If no metadata, use information from sensors\n              // Used for testing new data\n              timeMap.set(sensorKey, [sEntry.minTime, sEntry.maxTime]);\n              statsMap.set(sensorKey, {\n                mean: sEntry.mean,\n                std: sEntry.std,\n              });\n            }\n          }\n        });\n\n        stats.set(statsMap);\n        times.set(timeMap);\n\n        let l = $currentLevel;\n        if (!$sensorMap.get($currentSensor).levels.includes($currentLevel)) {\n          l = $sensorMap.get($currentSensor).levels[0];\n          currentLevel.set(l);\n        }\n\n        let date = $currentDate;\n        // Magic number of default date - if no URL params, use max date\n        // available\n        if (date === 20100420) {\n          date = timeMap.get($currentSensor)[1];\n          currentDate.set(date);\n        }\n\n        mounted.set(1);\n        updateRegionSliceCache($currentSensor, l, date);\n        if ($currentRegion) {\n          updateTimeSliceCache($currentSensor, $currentLevel, $currentRegion);\n        }\n      });\n  });\n\n  function toggleGraphShowStatus(event, to = null) {\n    if (to !== null) {\n      graphShowStatus = to;\n    } else {\n      graphShowStatus = !graphShowStatus;\n    }\n  }\n\n  // Constantly keep the URL parameters updated with the current state.\n  function updateURIParameters(sensor, level, region, date, signalType, encoding, zone) {\n    let pre = '';\n    if ($customDataView) {\n      const queryString = window.location.search;\n      const urlParams = new URLSearchParams(queryString);\n      pre = 'sensors=' + urlParams.get('sensors') + '&';\n    }\n    window.history.replaceState(\n      {},\n      document.title,\n      '?' +\n        pre +\n        'sensor=' +\n        sensor +\n        '&level=' +\n        level +\n        '&region=' +\n        region +\n        '&date=' +\n        date +\n        '&signalType=' +\n        signalType +\n        '&encoding=' +\n        encoding +\n        (zone ? '&zone=' + zone : ''),\n    );\n  }\n\n  // Keep the URL updated with the current state\n  currentSensor.subscribe(s =>\n    updateURIParameters(s, $currentLevel, $currentRegion, $currentDate, $signalType, $encoding, $currentZone),\n  );\n  currentLevel.subscribe(l =>\n    updateURIParameters($currentSensor, l, $currentRegion, $currentDate, $signalType, $encoding, $currentZone),\n  );\n  currentRegion.subscribe(r =>\n    updateURIParameters($currentSensor, $currentLevel, r, $currentDate, $signalType, $encoding, $currentZone),\n  );\n  currentDate.subscribe(d =>\n    updateURIParameters($currentSensor, $currentLevel, $currentRegion, d, $signalType, $encoding, $currentZone),\n  );\n  signalType.subscribe(t =>\n    updateURIParameters($currentSensor, $currentLevel, $currentRegion, $currentDate, t, $encoding, $currentZone),\n  );\n  encoding.subscribe(e =>\n    updateURIParameters($currentSensor, $currentLevel, $currentRegion, $currentDate, $signalType, e, $currentZone),\n  );\n  currentZone.subscribe(z =>\n    updateURIParameters($currentSensor, $currentLevel, $currentRegion, $currentDate, $signalType, $encoding, z),\n  );\n</script>\n\n<style>\n  .error-message-container {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: gray;\n  }\n</style>\n\n{#if error}\n  <div class=\"error-message-container\">Failed to load data. Please try again later...</div>\n{/if}\n\n<MapBox {isIE} {graphShowStatus} {toggleGraphShowStatus} />\n",
    "<script>\n  import { fade } from 'svelte/transition';\n  import { writable } from 'svelte/store';\n\n  $: tick = 0;\n  let timer;\n  export function count() {\n    tick = 1;\n    clearInterval(timer);\n    timer = setInterval(() => {\n      tick += 1;\n    }, 1000);\n  }\n  $: if (tick >= 5) {\n    clearInterval(timer);\n  }\n</script>\n\n<style>\n  .message {\n    font-size: 13px;\n\n    text-align: center;\n    color: red;\n  }\n</style>\n\n<div class=\"message\">\n  {#if tick >= 1 && tick <= 3}\n    <p transition:fade={{ duration: 100 }}>No data available for selected location</p>\n  {/if}\n</div>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import {\n    currentRegion,\n    currentRegionName,\n    currentSensor,\n    currentLevel,\n    currentData,\n    regionData,\n    currentSensorName,\n    currentLevelName,\n    currentDate,\n    times,\n    stats,\n    sensors,\n    sensorMap,\n    signalType,\n    timeRangeOnSlider,\n    yesterday,\n    mounted,\n    dict,\n    special_counties,\n  } from '../stores.js';\n  import { calculateValFromRectified } from '../util.js';\n  import { DIRECTION_THEME } from '../theme.js';\n  import * as d3 from 'd3';\n  import d3Tip from 'd3-tip';\n\n  const parseTime = d3.timeParse('%Y%m%d');\n\n  let el;\n  let w;\n  let t;\n\n  onMount(_ => {\n    d3.select(el)\n      .selectAll('*')\n      .remove();\n\n    if (w > 400) w = 400;\n\n    const margin = { top: 15, right: 35, bottom: 70, left: 60 },\n      width = w - margin.left - margin.right,\n      height = 0.85 * w - margin.top - margin.bottom;\n\n    // size chart\n\n    // set ranges\n    let x = d3.scaleBand().rangeRound([0, width]);\n    let y = d3.scaleLinear().range([height, 0]);\n\n    // attach graphic\n\n    let svg = d3\n      .select(el)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    // draw axes\n    svg\n      .append('g')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(x).tickFormat(''));\n    svg.append('g').call(d3.axisLeft(y).tickFormat(''));\n\n    regionData.subscribe(d => updateGraph(d, $timeRangeOnSlider, $currentDate, $currentSensor, $signalType));\n    signalType.subscribe(s => updateGraph($regionData, $timeRangeOnSlider, $currentDate, $currentSensor, s));\n    timeRangeOnSlider.subscribe(r => updateGraph($regionData, r, $currentDate, $currentSensor, $signalType));\n  });\n\n  function updateGraph(data, range, date, sensor, signal) {\n    if (!$mounted) return;\n\n    // if there is an existing chart, remove it and redraw\n    d3.select(el)\n      .selectAll('*')\n      .remove();\n    d3.select(el).html('');\n\n    const margin = { top: 15, right: 35, bottom: 70, left: 60 },\n      width = w - margin.left - margin.right,\n      height = 0.85 * w - margin.top - margin.bottom;\n\n    let svg = d3\n      .select(el)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    // set date range\n    let minDate = parseTime(range.min);\n    let maxDate = parseTime(range.max);\n\n    data = data.filter(it => {\n      let t = parseTime(it['time_value']);\n      return t >= minDate && t <= maxDate;\n    });\n\n    let currDate = parseTime(date);\n    let currDateSeven = d3.timeDay.offset(currDate, -6);\n    // peg values to max and min if out of range\n    let minMax = calculateSD(sensor);\n    let chartMax = minMax[1];\n    let chartMin = minMax[0];\n\n    let latest_direction = -100;\n    let hit_latest_node = false;\n    for (let i = data.length - 1; i >= 0; i--) {\n      let directionDate = parseTime(data[i].time_value);\n      if (directionDate >= currDateSeven && directionDate <= currDate) {\n        data[i].inDirection = true;\n        if (!hit_latest_node) {\n          latest_direction = data[i].direction;\n          data[i].coloredDirection = latest_direction;\n          hit_latest_node = true;\n        } else {\n          data[i].coloredDirection = latest_direction;\n        }\n      } else {\n        data[i].inDirection = false;\n      }\n      data[i].max = false;\n      if (+data[i].value < minMax[0]) {\n        data[i].value = minMax[0];\n      } else if (+data[i].value > minMax[1]) {\n        data[i].max = true;\n        if (+data[i].value > chartMax) chartMax = +data[i].value;\n      }\n    }\n\n    if (chartMax > 100 && $sensorMap.get(sensor).format === 'percent') {\n      chartMax = 100;\n    }\n    // scale x and y axes\n    let x = d3\n      .scaleTime()\n      .domain([d3.extent(data, d => parseTime(d.time_value))[0], parseTime(yesterday)])\n      .range([0, width]);\n    let y = d3\n      .scaleLinear()\n      .domain([minMax[0], chartMax])\n      .range([height, 0]);\n\n    let formatYTicks;\n    let format = $sensorMap.get(sensor).format;\n    if (format === 'percent') formatYTicks = d => d + '%';\n    else if (format === 'raw') {\n      const range = y.domain()[1] - y.domain()[0];\n      if (range > 10) {\n        formatYTicks = d3.format('.0f');\n      } else if (range < 1) {\n        formatYTicks = d3.format('.2f');\n      } else {\n        formatYTicks = d3.format('.1f');\n      }\n      //formatYTicks = y.domain[1] - y.domain[0] > 10 ? d3.format('.0f') : d3.format('.1f');\n    }\n    let formatXTicks = data.length < 6 ? d3.timeDay.every(1) : d3.timeDay.every(4);\n\n    // append the axes\n    svg\n      .append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(\n        d3\n          .axisBottom(x)\n          .tickFormat(d3.timeFormat('%m/%d'))\n          .ticks(7),\n      );\n\n    svg\n      .selectAll('text')\n      .attr('dy', '8px')\n      .attr('dx', '-6px')\n      .attr('transform', 'rotate(-30)');\n\n    svg\n      .append('g')\n      .attr('class', 'axis')\n      .call(d3.axisLeft(y).tickFormat(formatYTicks));\n\n    // define tool tip\n    let tip = d3Tip()\n      .attr('class', 'd3-tip')\n      .offset([-10, 0])\n      .html(function(d) {\n        return (\n          d3.timeFormat('%m/%d')(parseTime(d.time_value)) +\n          ': ' +\n          //(sensor.match(/num/) ? Math.round(d.value) : d.value.toFixed(2)) +\n          d.value.toFixed(2) +\n          ($sensorMap.get(sensor).format === 'percent' ? '%' : '') +\n          (d.stderr ? ' ± ' + d.stderr.toFixed(2) + ($sensorMap.get(sensor).format === 'percent' ? '%' : '') : '')\n        );\n      });\n    svg.call(tip);\n\n    // draw the line graph\n    let line = d3\n      .line()\n      .x(d => x(parseTime(d.time_value)))\n      .y(d => y(+d.value));\n\n    let area = d3\n      .area()\n      .x(d => x(parseTime(d.time_value)))\n      .y0(d => y(Math.max(0, +d.value - d.stderr)))\n      .y1(d => y(+d.value + d.stderr));\n\n    svg\n      .append('path')\n      .attr('fill', 'none')\n      .attr('stroke', '#767676')\n      .attr('stroke-width', 3)\n      .attr('d', line(data));\n\n    svg\n      .append('path')\n      .attr('fill', 'rgba(0, 0, 0, 0.1')\n      .attr('d', area(data));\n\n    svg\n      .selectAll('circle')\n      .data(data)\n      .enter()\n      .append('circle')\n      .attr('r', d => (d.time_value == date ? 6 : 4))\n      .attr('cx', d => x(parseTime(d.time_value)))\n      .attr('cy', d => y(+d.value))\n      .attr('id', d => d.time_value)\n      .style('stroke-width', d => (d.time_value == date ? 1 : 1))\n      .style('fill', d => {\n        let color = '#767676';\n        if (d.inDirection && signal === 'direction') {\n          switch (d.coloredDirection) {\n            case 1:\n              color = DIRECTION_THEME.increasing;\n              break;\n            case 0:\n              color = DIRECTION_THEME.steady;\n              break;\n            case -1:\n              color = DIRECTION_THEME.decreasing;\n              break;\n            default:\n              color = 'white';\n              break;\n          }\n        } else if (d.time_value == date && signal === 'value') {\n          color = 'white';\n        }\n        return color;\n      })\n      .style('stroke', '#767676')\n      .on('mouseover', tip.show)\n      .on('mouseout', tip.hide)\n      .on('click', d => {\n        tip.hide;\n        d3.selectAll('.d3-tip').remove();\n        currentDate.set(d.time_value);\n      });\n\n    // label the y-axis\n    svg\n      .append('text')\n      .attr('class', 'axis-text')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', 0 - margin.left)\n      .attr('x', 0 - height / 2)\n      .attr('dy', '0.75em')\n      .style('text-anchor', 'middle')\n      .text($sensorMap.get(sensor).yAxis);\n\n    // label the x-axis\n    svg\n      .append('text')\n      .attr('class', 'axis-text')\n      .attr('transform', 'translate(' + width / 2 + ', ' + (height + margin.top + 30) + ')')\n      .style('text-anchor', 'middle')\n      .text('Date');\n  }\n\n  // calculate the graph's min and max range based off the dataset's standard deviation\n  function calculateSD(sensor) {\n    let sts;\n    if ($currentSensor.match(/num/)) {\n      sts = $stats.get(sensor + '_' + $currentLevel);\n    } else {\n      sts = $stats.get(sensor);\n    }\n    let minMax = [sts.mean - 3 * sts.std, sts.mean + 3 * sts.std];\n    if (minMax[0] < 0) {\n      minMax[0] = 0;\n    }\n    return minMax;\n  }\n\n  function get_display_name() {\n    let title = '';\n    if ($currentRegionName && $currentLevel === 'county' && $currentRegion.slice(-3) + '' === '000') {\n      title += 'Rest of';\n    }\n    title += $currentRegionName;\n    if ($currentRegionName && $currentLevel === 'county' && $currentRegion.slice(-3) + '' !== '000') {\n      if (!special_counties.includes($currentRegionName)) {\n        title += 'County, ';\n      }\n      title += dict[$currentRegion.slice(0, 2)];\n    }\n    return title;\n  }\n</script>\n\n<style>\n  .graph {\n    max-height: 390px;\n    max-width: 400px;\n  }\n\n  .graph-title {\n    text-align: center;\n    font-size: 14px;\n    margin: 3px 0px !important;\n    padding: 0px 20px 0px 20px !important;\n    font-family: 'Open Sans', sans-serif;\n    color: var(--darkgrey);\n  }\n\n  .graph-description {\n    text-align: center;\n    margin: 3px 20px 3px 20px !important;\n    font-size: 14px;\n    padding: 0px !important;\n  }\n\n  .graph-itself {\n    margin: 0px 6px;\n    width: 374px;\n  }\n</style>\n\n<div class=\"graph\">\n  <h5 class=\"graph-title\">{$sensorMap.get($currentSensor).chartTitleText}</h5>\n  <p class=\"graph-description\">\n    {$currentRegionName && $currentLevel === 'county' && $currentRegion.slice(-3) + '' === '000' ? 'Rest of' : ''}\n    {$currentRegionName}\n    {$currentRegionName && $currentLevel === 'county' && $currentRegion.slice(-3) + '' !== '000' ? (!special_counties.includes($currentRegionName) ? 'County, ' : ', ') + dict[$currentRegion.slice(0, 2)] : ''}\n  </p>\n\n  <div bind:clientWidth={w} class=\"graph-itself\">\n    <div bind:this={el} />\n  </div>\n</div>\n",
    "<script>\n  import Graph from './Graph.svelte';\n  import { mapFirstLoaded } from '../stores.js';\n\n  export let isIE, graphShowStatus, toggleGraphShowStatus;\n</script>\n\n<style>\n  .graph-container {\n    position: absolute;\n    z-index: 1001;\n    bottom: 124px;\n    right: 10px;\n    padding: 5px 5px;\n    box-sizing: border-box;\n    transition: opacity 0.3s ease-in-out;\n    visibility: hidden;\n    opacity: 0;\n\n    /* rounded design refresh */\n    border-radius: 7px;\n    background-color: rgba(255, 255, 255, 0.9);\n    box-shadow: 0px 4px 10px rgba(151, 151, 151, 0.25);\n  }\n\n  .graph-container.show {\n    visibility: visible;\n    opacity: 1;\n  }\n\n  .hide-graph-button-anchor {\n    position: relative;\n  }\n\n  .hide-graph-button {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 14px;\n    height: 14px;\n    color: #333;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    background-color: transparent;\n    padding: 0;\n    border: 0;\n    transition: opacity 0.1s ease-in;\n    opacity: 0.7;\n  }\n\n  .hide-graph-button:hover {\n    opacity: 1;\n  }\n\n  .graph-toggole-button-container {\n    position: absolute;\n    float: right;\n    z-index: 1001;\n    bottom: 124px;\n    right: 10px;\n    padding: 5px 5px;\n    box-sizing: border-box;\n\n    /* rounded design refresh */\n    border-radius: 7px;\n    background-color: rgba(255, 255, 255, 0.9);\n    box-shadow: 0px 4px 10px rgba(151, 151, 151, 0.25);\n  }\n\n  .graph-toggle-button {\n    font-family: 'Open Sans', sans-serif;\n    width: 85px;\n    height: 40px;\n    font-size: 14px;\n    cursor: pointer;\n    color: #333;\n    background-color: transparent;\n    padding: 0;\n    border: 0;\n    transition: all 0.1s ease-in;\n    position: relative;\n  }\n\n  .graph-toggle-button:hover {\n    background-color: #eee;\n  }\n\n  button.graph-toggle-button .button-tooltip {\n    visibility: hidden;\n    width: 120px;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #666;\n    background-color: #fff;\n    color: #333;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 14px;\n    text-align: center;\n    border-radius: 6px;\n    padding: 5px 5px;\n    position: absolute;\n    z-index: 1;\n    top: 0px;\n    right: 120%;\n  }\n\n  button.graph-toggle-button .button-tooltip::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 100%;\n    margin-top: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent transparent #666;\n  }\n\n  button.graph-toggle-button:hover .button-tooltip {\n    visibility: visible;\n  }\n</style>\n\n{#if $mapFirstLoaded && !graphShowStatus}\n  <div class=\"graph-toggole-button-container\">\n    <button\n      title={isIE !== undefined ? 'Show time series' : ''}\n      class=\"graph-toggle-button\"\n      aria-label=\"show time series\"\n      on:click={event => toggleGraphShowStatus(false)}>\n      <span class=\"button-tooltip\">Show time series</span>\n      <b>View Time Graph</b>\n    </button>\n  </div>\n{/if}\n\n<div class=\"graph-container {$mapFirstLoaded && graphShowStatus ? 'show' : ''}\">\n  <div class=\"hide-graph-button-anchor\">\n    <button\n      title=\"Hide time series\"\n      aria-label=\"Hide time series\"\n      on:click={toggleGraphShowStatus}\n      class=\"hide-graph-button\">\n      &#10005;\n    </button>\n  </div>\n\n  <Graph />\n</div>\n",
    "<script>\n  import { DIRECTION_THEME, ENCODING_BUBBLE_THEME } from './theme.js';\n  import {\n    signalType,\n    stats,\n    currentSensor,\n    sensorMap,\n    currentLevel,\n    currentDataReadyOnMap,\n    encoding,\n    radiusScale,\n  } from './stores.js';\n  import * as d3 from 'd3';\n  import logspace from 'compute-logspace';\n\n  let high = '';\n  let low = '';\n  let colorScaleLog;\n\n  $: logColorArr = [{ label: '0', from_color: DIRECTION_THEME.countMin, to_color: DIRECTION_THEME.countMin }];\n  $: linColorArr = [];\n\n  currentSensor.subscribe(s => ($stats ? update(s, $stats, $currentLevel, $encoding) : ''));\n  stats.subscribe(s => (s ? update($currentSensor, s, $currentLevel, $encoding) : ''));\n  currentLevel.subscribe(l => ($stats ? update($currentSensor, $stats, l, $encoding) : ''));\n  encoding.subscribe(e => ($stats ? update($currentSensor, $stats, $currentLevel, e) : ''));\n  radiusScale.subscribe(e => ($stats ? update($currentSensor, $stats, $currentLevel, $encoding) : ''));\n\n  function update(sens, stats, level, encoding) {\n    updateLowHigh(sens, stats, level, encoding);\n  }\n\n  function updateLowHigh(sens, stats, level) {\n    let sts;\n    let valueMinMax;\n\n    if ($currentSensor.match(/num/)) {\n      sts = stats.get(sens + '_' + level);\n      valueMinMax = [sts.mean - 3 * sts.std, sts.mean + 3 * sts.std];\n\n      high = getSigfigs(valueMinMax[1].toFixed(2), 3);\n      low = getSigfigs(Math.max(0, valueMinMax[0]).toFixed(2), 3);\n\n      logColorArr = [{ label: '0', from_color: DIRECTION_THEME.countMin, to_color: DIRECTION_THEME.countMin }];\n      let max = Math.log(valueMinMax[1]) / Math.log(10);\n      let min = Math.log(Math.max(0.14, valueMinMax[0])) / Math.log(10);\n      let arr = logspace(min, max, 7);\n\n      colorScaleLog = d3\n        .scaleSequentialLog(d3.interpolateYlOrRd)\n        .domain([Math.max(0.14, valueMinMax[0]), valueMinMax[1]]);\n\n      for (let i = 0; i < arr.length - 1; i++) {\n        arr[i] = parseFloat(arr[i]).toFixed(2);\n\n        logColorArr.push({\n          label: arr[i],\n          from_color: colorScaleLog(arr[i]),\n          to_color: colorScaleLog(arr[i + 1]),\n        });\n      }\n    } else {\n      sts = stats.get(sens);\n      valueMinMax = [sts.mean - 3 * sts.std, sts.mean + 3 * sts.std];\n      if ($sensorMap.get($currentSensor).format === 'raw') {\n        high = getSigfigs(valueMinMax[1].toFixed(2), 3);\n        low = getSigfigs(Math.max(0, valueMinMax[0]).toFixed(2), 3);\n        valueMinMax[0] = Math.max(0, valueMinMax[0]);\n      } else {\n        high = getSigfigs(Math.min(100, valueMinMax[1]).toFixed(2), 3) + '%';\n        low = getSigfigs(Math.max(0, valueMinMax[0]).toFixed(2), 3) + '%';\n        valueMinMax[0] = Math.max(0, valueMinMax[0]);\n        valueMinMax[1] = Math.min(100, valueMinMax[1]);\n      }\n      const colorScaleLinear = d3.scaleSequential(d3.interpolateYlOrRd).domain([valueMinMax[0], valueMinMax[1]]);\n      let arr = splitDomain(valueMinMax[0], valueMinMax[1], 7);\n      linColorArr = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        arr[i] = parseFloat(arr[i]).toFixed(2);\n        linColorArr.push({\n          label: arr[i],\n          from_color: colorScaleLinear(arr[i]),\n          to_color: colorScaleLinear(arr[i + 1]),\n        });\n      }\n    }\n  }\n\n  function getSigfigs(value, sigFigs) {\n    return parseFloat(parseFloat(value).toPrecision(sigFigs));\n  }\n\n  function splitDomain(min, max, parts) {\n    let splits = [min];\n    const increment = (max - min) / parts;\n    for (let i = 1; i < parts; i++) {\n      splits.push(splits[i - 1] + increment);\n    }\n    splits.push(max);\n    return splits;\n  }\n\n  function getBubbleFill(value) {\n    let bubbleFill = d3.rgb(colorScaleLog(value));\n    bubbleFill.opacity = 0.5;\n    return bubbleFill.toString();\n  }\n\n  function getBubbleBorder(value) {\n    return colorScaleLog(value);\n  }\n</script>\n\n<style>\n  .toggle {\n    width: 230px;\n    padding-bottom: 15px;\n  }\n  .buttons-group button.button .disabled-tooltip {\n    visibility: hidden;\n    width: 80px;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #666;\n    background-color: #fff;\n    color: #333;\n    font-weight: 400;\n    font-size: 0.95em;\n    line-height: 1.2em;\n    text-align: center;\n    border-radius: 6px;\n    padding: 5px 5px;\n    position: absolute;\n    z-index: 1;\n    top: -5px;\n    left: 105%;\n  }\n\n  .buttons-group button.button .disabled-tooltip::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    right: 100%;\n    margin-top: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent #666 transparent transparent;\n  }\n\n  .buttons-group button.button:hover .disabled-tooltip {\n    visibility: visible;\n  }\n\n  .buttons-group-side {\n    width: 100%;\n    display: flex;\n    align-items: stretch;\n    justify-content: stretch;\n  }\n\n  .buttons-group-side button.button {\n    width: 110px;\n    flex-grow: 1;\n    margin: 0px;\n    font-size: 1em;\n    font-weight: 400;\n    background-color: #fff;\n    border-style: solid;\n    border-color: #dbdbdb;\n    border-width: 1px;\n    border-radius: 4px;\n    color: #666;\n    cursor: pointer;\n    justify-content: center;\n    padding-bottom: calc(0.5em - 1px);\n    padding-left: 0.5em;\n    padding-right: 0.5em;\n    padding-top: calc(0.5em - 1px);\n    text-align: center;\n\n    position: relative;\n  }\n\n  .buttons-group-side button.button:disabled {\n    background-color: rgb(211, 211, 211);\n    color: #666;\n    cursor: not-allowed;\n  }\n\n  .buttons-group-side .button:first-child {\n    margin-right: 4px;\n  }\n\n  .buttons-group-side button.button .disabled-tooltip {\n    visibility: hidden;\n    width: 80px;\n    border-style: solid;\n    border-width: 1px;\n    border-color: #666;\n    background-color: #fff;\n    color: #333;\n    font-size: 0.95em;\n    line-height: 1.2em;\n    font-weight: 400;\n    text-align: center;\n    border-radius: 6px;\n    padding: 5px 5px;\n    position: absolute;\n    z-index: 1;\n    top: 150%;\n    left: 50%;\n    margin-left: -50px;\n  }\n\n  .buttons-group-side button.button .disabled-tooltip::after {\n    content: '';\n    position: absolute;\n    bottom: 100%;\n    left: 50%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent #666 transparent;\n  }\n  .buttons-group-side button.button:hover .disabled-tooltip {\n    visibility: visible;\n  }\n\n  .buttons-group-side .button.selected {\n    background-color: #ececec;\n    color: #111;\n    font-weight: 600;\n\n    border-color: transparent;\n  }\n\n  .buttons-group-side .button:hover {\n    background-color: #dcdcdc;\n    color: #111;\n  }\n\n  .buttons-group-side .button:focus,\n  .buttons-group-side .button:active {\n    outline: none;\n  }\n\n  .legend {\n    font-size: 0.8rem;\n    /* border-radius: 8px; */\n    padding: 15px 15px;\n    box-sizing: border-box;\n\n    transition: all 0.1s ease-in;\n\n    height: 100%;\n    /* if the option for the bubble encoding is visible for specific indicators (e.g., cases), the width of the legend can expand. So do not fix it to a certain number.*/\n    /* width: 376px; */\n    flex-direction: column;\n  }\n\n  .legend.value {\n    display: flex;\n    flex-direction: column;\n    justify-content: left;\n  }\n\n  .legend-grouping ul,\n  .trend-legend-grouping ul {\n    margin: 0;\n    padding: 0;\n    float: left;\n    list-style: none;\n  }\n  .trend-legend-grouping ul li {\n    display: block;\n    float: left;\n    width: 110px;\n    margin-left: 0px;\n    padding-top: 0px;\n    text-align: center;\n    font-size: 80%;\n    list-style: none;\n  }\n\n  .trend-legend-grouping ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 15px;\n    width: 110px;\n  }\n\n  .legend-grouping ul li.colored {\n    display: block;\n    float: left;\n    width: 43px;\n    margin-right: 1px;\n    margin-left: 0px;\n    padding-top: 0px;\n    text-align: left;\n    font-size: 80%;\n    list-style: none;\n  }\n\n  .legend-grouping ul.legend-labels li span.colored {\n    display: block;\n    float: left;\n    height: 15px;\n    width: 43px;\n  }\n\n  .legend-grouping ul li.ends {\n    display: block;\n    float: left;\n    width: 37px;\n    margin-right: 1px;\n    margin-left: 0px;\n    padding-top: 0px;\n    text-align: left;\n    font-size: 80%;\n    list-style: none;\n  }\n\n  .legend-grouping ul.legend-labels li span.ends {\n    display: block;\n    float: left;\n    height: 15px;\n    width: 37px;\n  }\n\n  .bubble-legend ul {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: space-around;\n  }\n\n  .bubble-legend li {\n    display: flex;\n    font-size: 80%;\n    align-items: center;\n  }\n\n  .bubble {\n    border: 1px solid #666;\n    border-radius: 200px;\n    display: inline-block;\n    margin-right: 0.3rem;\n  }\n\n  #encoding-options {\n    display: flex;\n  }\n\n  #encoding-options > div {\n    margin-right: 0.5rem;\n  }\n\n  .hidden {\n    display: none;\n  }\n</style>\n\n<div aria-label=\"legend\" class=\"legend {$signalType === 'value' ? 'value' : ''}\">\n  <div id=\"encoding-options\">\n    <div class=\"toggle\">\n      <div aria-label=\"display type\" class=\"buttons-group-side\">\n        <button\n          aria-pressed={$signalType === 'value' ? 'true' : 'false'}\n          class=\"button {$signalType === 'value' ? 'selected' : ''}\"\n          on:click={() => {\n            if ($signalType !== 'value') {\n              currentDataReadyOnMap.set(false);\n              signalType.set('value');\n            }\n          }}>\n          {$currentSensor.match(/num/) ? 'Count' : 'Intensity'}\n        </button>\n        <button\n          aria-pressed={$signalType === 'direction' ? 'true' : 'false'}\n          class=\"button {$signalType === 'direction' ? 'selected' : ''}\"\n          on:click={() => {\n            if ($signalType !== 'direction') {\n              currentDataReadyOnMap.set(false);\n              signalType.set('direction');\n            }\n          }}\n          disabled={$sensorMap.get($currentSensor).official ? true : false}>\n          7-day Trend\n          {#if $sensorMap.get($currentSensor).official}\n            <span class=\"disabled-tooltip\">Currently unavailable</span>\n          {/if}\n        </button>\n\n      </div>\n    </div>\n\n    <div class=\"toggle {$signalType === 'direction' || !$currentSensor.match(/num/) ? 'hidden' : ''}\">\n      <div aria-label=\"encoding type\" class=\"buttons-group-side\">\n        <button\n          aria-pressed={$encoding === 'color' ? 'true' : 'false'}\n          class=\"button {$encoding === 'color' ? 'selected' : ''}\"\n          on:click={() => {\n            encoding.set('color');\n          }}>\n          Choropleth\n        </button>\n        <button\n          aria-pressed={$encoding === 'bubble' ? 'true' : 'false'}\n          class=\"button {$encoding === 'bubble' ? 'selected' : ''}\"\n          on:click={() => {\n            encoding.set('bubble');\n          }}>\n          Bubbles\n        </button>\n      </div>\n    </div>\n  </div>\n  {#if $encoding === 'color'}\n    {#if $signalType === 'direction'}\n      <div class=\"trend-legend-grouping\">\n        <ul class=\"legend-labels\">\n          <li>\n            <span style=\"background-color: {DIRECTION_THEME.increasing}\" />\n            {@html DIRECTION_THEME.increasingIcon}\n            Increasing\n          </li>\n          <li>\n            <span style=\"background-color: {DIRECTION_THEME.steady}\" />\n            {@html DIRECTION_THEME.steadyIcon}\n            Steady\n          </li>\n          <li>\n            <span style=\"background-color: {DIRECTION_THEME.decreasing}\" />\n            {@html DIRECTION_THEME.decreasingIcon}\n            Decreasing\n          </li>\n        </ul>\n      </div>\n    {:else if $currentSensor.match(/num/)}\n      <div class=\"legend-grouping\">\n        <ul class=\"legend-labels\">\n          {#each logColorArr as { label, from_color, to_color }, j}\n            <li class=\"colored\">\n              <span class=\"colored\" style=\"background: linear-gradient(to right, {from_color}, {to_color})\" />\n              {getSigfigs(label, 3)}\n            </li>\n          {/each}\n          <li class=\"ends\">\n            <span class=\"ends\" style=\"background: rgba(255, 255, 255, 0.9);\" />\n            {high ? high + '+' : ''}\n          </li>\n        </ul>\n      </div>\n    {:else}\n      <div class=\"legend-grouping\">\n        <ul class=\"legend-labels\">\n          {#each linColorArr as { label, from_color, to_color }, j}\n            <li class=\"colored\">\n              <span class=\"colored\" style=\"background: linear-gradient(to right, {from_color}, {to_color})\" />\n              {getSigfigs(label, 3)}\n            </li>\n          {/each}\n          <li class=\"ends\">\n            <span class=\"ends\" style=\"background: rgba(255, 255, 255, 0.9);\" />\n            {high ? high + '+' : ''}\n          </li>\n        </ul>\n      </div>\n    {/if}\n  {:else if $encoding === 'bubble'}\n    <div class=\"bubble-legend\">\n      <ul>\n        {#each [...logColorArr] as { label, from_color, to_color }, j}\n          {#if +label > 0}\n            <li class=\"colored\">\n              <div\n                style=\"width: {$radiusScale(+label) * 2}px; height: {$radiusScale(+label) * 2}px;background: {getBubbleFill(+label)};border-color:\n                {from_color}\"\n                class=\"bubble\" />\n              <div>{getSigfigs(label, 3)}</div>\n            </li>\n          {/if}\n        {/each}\n        {#if high}\n          <li class=\"colored\">\n            <div\n              style=\"width: {$radiusScale(+high) * 2}px; height: {$radiusScale(+high) * 2}px; background: {getBubbleFill(+high)};border-color:\n              {getBubbleBorder(+high)}\"\n              class=\"bubble\" />\n            <div>{high ? high + '+' : ''}</div>\n          </li>\n        {/if}\n      </ul>\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  //import mapboxgl from 'mapbox-gl';\n  import { onMount, setContext } from 'svelte';\n  import mapboxgl from 'mapbox-gl';\n  import { defaultRegionOnStartup, getTextColorBasedOnBackground, logScale } from './util.js';\n  import { DIRECTION_THEME, MAP_THEME, ENCODING_BUBBLE_THEME } from './theme.js';\n  import AutoComplete from 'simple-svelte-autocomplete';\n  import IoIosSearch from 'svelte-icons/io/IoIosSearch.svelte';\n  import Options from './Options.svelte';\n  import Legend from './Legend.svelte';\n  import Banner from './Banner.svelte';\n  import Time from './Time.svelte';\n  import Graph from './Graph/Graph.svelte';\n  import GraphContainer from './Graph/GraphContainer.svelte';\n\n  import {\n    levels,\n    stats,\n    currentRegion,\n    currentRegionName,\n    geojsons,\n    currentSensor,\n    currentLevel,\n    currentDate,\n    currentData,\n    currentRange,\n    currentZone,\n    signalType,\n    encoding,\n    currentDataReadyOnMap,\n    mounted,\n    mapFirstLoaded,\n    sensorMap,\n    radiusScale,\n    dict,\n    special_counties,\n  } from './stores.js';\n  import * as d3 from 'd3';\n  import logspace from 'compute-logspace';\n\n  export let isIE, graphShowStatus, toggleGraphShowStatus;\n\n  let searchErrorComponent;\n  let parseTime = d3.timeParse('%Y%m%d');\n  let formatTimeWithoutYear = d3.timeFormat('%B %d');\n\n  let LAT = -0.5;\n  let LON = -0.5;\n  let ZOOM = 3.9;\n\n  let SWPA_LAT = 2.8;\n  let SWPA_LON = 12.6;\n  let SWPA_ZOOM = 7.7;\n\n  let R = 6378137.0;\n  const projection = d3\n    .geoAlbersUsa()\n    .translate([0, 0])\n    .scale(R);\n  const projectionMercartor = d3\n    .geoMercator()\n    .translate([0, 0])\n    .scale(R);\n  const cityPoints = [\n    'city-point-unclustered-pit',\n    'city-point-unclustered',\n    'city-point-unclustered-2',\n    'city-point-unclustered-3',\n    'city-point-unclustered-4',\n  ];\n\n  // Boolean tracking if the map has been initialized.\n  let mapMounted = false;\n  let chosenRandom = false;\n  let hoveredId = null;\n  let container;\n  let map;\n  let popup;\n  let megaHoveredId;\n  let clickedId;\n  let megaClickedId;\n  let selectedRegion;\n\n  $: regionList = [];\n  $: loaded = false;\n  $: invalidSearch = false;\n  $: currentSensorTooltip = $sensorMap.get($currentSensor).mapTitleText;\n\n  // given the level (state/msa/county), returns the name of its \"centered\" source/layer\n  function center(level) {\n    return `${level}-centers`;\n  }\n\n  function centerHighlight(level) {\n    return `${level}-centers-highlight`;\n  }\n\n  onMount(_ => {\n    let containerWidth = container.clientWidth;\n    if (containerWidth <= 1021) {\n      //ZOOM = 3.9;\n      ZOOM = containerWidth / 300;\n    } else if (containerWidth > 1021 && containerWidth < 1280) {\n      //ZOOM = 4.1;\n      ZOOM = containerWidth / 330;\n    } else if (containerWidth >= 1280) {\n      //ZOOM = 4.3;\n      ZOOM = Math.min(4.3, containerWidth / 350);\n    }\n    Promise.all([d3.json('./maps/name_id_info.json')]).then(([a]) => {\n      regionList = a['all'];\n      loaded = true;\n    });\n  });\n\n  // Mouse event handlers\n  const onMouseEnter = level => e => {\n    map.getCanvas().style.cursor = 'pointer';\n    popup.setLngLat(e.lngLat).addTo(map);\n    map.setFeatureState({ source: level, id: hoveredId }, { hover: false });\n    map.setFeatureState({ source: center(level), id: hoveredId }, { hover: false });\n    map.setFeatureState({ source: 'mega-county', id: megaHoveredId }, { hover: false });\n  };\n\n  const onMouseMove = level => e => {\n    if (level === 'state-outline') {\n      map.getCanvas().style.cursor = 'pointer';\n      popup\n        .setLngLat(e.lngLat)\n        .setHTML('Estimate unavailable for rest of ' + e.features[0].properties.NAME)\n        .addTo(map);\n      return;\n    }\n\n    map.setFeatureState({ source: level, id: hoveredId }, { hover: false });\n    map.setFeatureState({ source: center(level), id: hoveredId }, { hover: false });\n    map.setFeatureState({ source: 'mega-county', id: megaHoveredId }, { hover: false });\n\n    let fillColor;\n    if (level === 'mega-county') {\n      if (hoveredId === null) {\n        megaHoveredId = e.features[0].id;\n        map.setFeatureState({ source: level, id: megaHoveredId }, { hover: true });\n        // get hover color for mega county\n        let colorStops = map.getLayer(level).getPaintProperty('fill-color')['stops'];\n        let valueDomain = [];\n        let colorRange = [];\n        for (let i = 0; i < colorStops.length; i++) {\n          valueDomain.push(colorStops[i][0]);\n          colorRange.push(colorStops[i][1].match(/\\d+(\\.\\d{1,2})?/g));\n        }\n        let ramp = d3\n          .scaleLinear()\n          .domain(valueDomain)\n          .range(colorRange);\n        ramp.clamp(true);\n\n        const value = e.features[0].properties.value;\n        let arr = ramp(value);\n        fillColor = 'rgba(' + arr.join(', ') + ')';\n      } else {\n        megaHoveredId = null;\n      }\n    } else {\n      hoveredId = e.features[0].id;\n      map.setFeatureState({ source: level, id: hoveredId }, { hover: true });\n      map.setFeatureState({ source: center(level), id: hoveredId }, { hover: true });\n\n      //get hover color for regular county\n      let colorStops = map.getLayer(level).getPaintProperty('fill-color')['stops'];\n      if ($encoding === 'bubble') {\n        fillColor = 'white';\n      } else if ($currentSensor.match(/num/)) {\n        let valueDomain = [];\n        let colorRange = [];\n        for (let i = 0; i < colorStops.length; i++) {\n          valueDomain.push(colorStops[i][0]);\n          colorRange.push(colorStops[i][1].match(/\\d+/g));\n        }\n        let ramp = d3\n          .scaleLinear()\n          .domain(valueDomain)\n          .range(colorRange);\n        ramp.clamp(true);\n\n        const value = e.features[0].properties.value;\n        let arr = ramp(value);\n        fillColor = 'rgb(' + arr.join(', ') + ')';\n      } else {\n        let valueDomain = [];\n        let colorRange = [];\n        for (let i = 0; i < colorStops.length; i++) {\n          valueDomain.push(colorStops[i][0]);\n          colorRange.push(colorStops[i][1].match(/\\d+/g));\n        }\n\n        let ramp = d3\n          .scaleLinear()\n          .domain(valueDomain)\n          .range(colorRange);\n        ramp.clamp(true);\n\n        const value = e.features[0].properties.value;\n        let arr = ramp(value);\n        fillColor = 'rgb(' + arr.join(', ') + ')';\n      }\n    }\n\n    if (hoveredId !== null && level === 'mega-county') return;\n    // popup\n    const { value, direction, NAME, STATE, Population } = e.features[0].properties;\n\n    const date = formatTimeWithoutYear(parseTime($currentDate));\n    const sens = $sensorMap.get($currentSensor);\n    const popCommas = parseInt(Population).toLocaleString();\n    let title = (level === 'mega-county' ? 'Rest of ' : '') + NAME + get_label_specifics(NAME, STATE, level);\n    let body;\n\n    if ($signalType === 'value') {\n      // More information displayed when counts is shown\n      if ($currentSensor.match(/incidence_num/)) {\n        const avg = e.features[0].properties.value;\n        const count = e.features[0].properties.value1;\n        body = `\n          <div class=\"map-popup-region-value-container\">\n            Population: ${popCommas} <br>\n            <u>${sens.yAxis}</u>: <br>\n            &emsp; ${date}: ${count} <br>\n            &emsp; 7-day avg:\n            <span class=\"map-popup-region-value\" \n                  style=\"background-color: ${fillColor}; \n                        color: ${getTextColorBasedOnBackground(fillColor)};\">\n              ${parseFloat(avg.toFixed(2)).toLocaleString()}\n            </span>\n            \n          </div>\n        `;\n      } else if ($currentSensor.match(/incidence_prop/)) {\n        const avg = e.features[0].properties.value;\n        const count = e.features[0].properties.value1;\n        body = `\n          <div class=\"map-popup-region-value-container\">\n            Population: ${popCommas} <br>\n            <u>${sens.yAxis}</u>: <br>\n            &emsp; ${date}: ${count.toFixed(2)} <br>\n            &emsp; 7-day avg:\n            <span class=\"map-popup-region-value\" \n                  style=\"background-color: ${fillColor}; \n                        color: ${getTextColorBasedOnBackground(fillColor)};\">\n              ${parseFloat(avg.toFixed(2)).toLocaleString()}\n              ${sens.format === 'percent' ? '%' : ''}\n            </span>\n          </div>\n        `;\n      } else {\n        body = `\n          <div class=\"map-popup-region-value-container\">\n            ${sens.yAxis}:\n            <span class=\"map-popup-region-value\" \n                  style=\"background-color: ${fillColor}; \n                        color: ${getTextColorBasedOnBackground(fillColor)};\">\n              ${parseFloat(value.toFixed(2)).toLocaleString()}\n              ${sens.format === 'percent' ? '%' : ''}\n            </span>\n          </div>\n        `;\n      }\n    } else {\n      let color, icon, text;\n      if (direction === 1) {\n        color = DIRECTION_THEME.increasing;\n        icon = DIRECTION_THEME.increasingIcon;\n        text = 'Increasing';\n      } else if (direction === 0) {\n        color = DIRECTION_THEME.steady;\n        icon = DIRECTION_THEME.steadyIcon;\n        text = 'Steady';\n      } else {\n        color = DIRECTION_THEME.decreasing;\n        icon = DIRECTION_THEME.decreasingIcon;\n        text = 'Decreasing';\n      }\n\n      body = `<div class=\"map-popup-region-value-container\">\n                <span class=\"map-popup-region-value\" \n                      style=\"background-color: ${color};\n                      color: \n                      ${getTextColorBasedOnBackground(color)};\">\n                  ${icon} ${text} \n                </span>\n               </div>`;\n    }\n\n    body =\n      `<div class=\"map-popup-region-name\">\n        ${title}\n      </div>` + body;\n\n    popup\n      .setLngLat(e.lngLat)\n      .setHTML(body)\n      .addTo(map);\n  };\n\n  const onMouseLeave = level => e => {\n    if (level === 'state-outline') {\n      popup.remove();\n      return;\n    }\n    map.setFeatureState({ source: 'mega-county', id: megaHoveredId }, { hover: false });\n    if (level === 'mega-county' && hoveredId !== null) megaHoveredId = null;\n\n    map.setFeatureState({ source: level, id: hoveredId }, { hover: false });\n    map.setFeatureState({ source: center(level), id: hoveredId }, { hover: false });\n\n    if (level !== 'mega-county') hoveredId = null;\n\n    map.getCanvas().style.cursor = '';\n    popup.remove();\n  };\n\n  const onClick = level => e => {\n    if (clickedId) {\n      map.setFeatureState({ source: level, id: clickedId }, { select: false });\n      map.setFeatureState({ source: center(level), id: clickedId }, { select: false });\n    }\n    if (megaClickedId) {\n      map.setFeatureState({ source: 'mega-county', id: megaClickedId }, { select: false });\n    }\n    if (level === 'mega-county') {\n      if (hoveredId !== null) return;\n      if (megaHoveredId === megaClickedId) {\n        megaClickedId = null;\n        currentRegionName.set('');\n        currentRegion.set('');\n        return;\n      }\n\n      map.setFeatureState({ source: 'county', id: clickedId }, { select: false });\n      clickedId = null;\n      megaClickedId = e.features[0].id;\n      map.setFeatureState({ source: level, id: megaClickedId }, { select: true });\n      map.setFeatureState({ source: center(level), id: megaClickedId }, { select: true });\n      currentRegionName.set(e.features[0].properties.NAME);\n      currentRegion.set(e.features[0].properties.STATE + '000');\n    } else {\n      megaClickedId = null;\n      if (clickedId !== e.features[0].id) {\n        clickedId = e.features[0].id;\n        map.setFeatureState({ source: level, id: clickedId }, { select: true });\n        map.setFeatureState({ source: center(level), id: clickedId }, { select: true });\n        currentRegionName.set(e.features[0].properties.NAME);\n        currentRegion.set(e.features[0].properties.id);\n      } else {\n        clickedId = null;\n        currentRegionName.set('');\n        currentRegion.set('');\n      }\n    }\n  };\n\n  // If it hasn't been initialized and we have geojsons and initial data, create map.\n  $: if (!map && $geojsons.size !== 0 && $stats) {\n    initializeMap();\n  }\n\n  // Update the map when sensor or level changes.\n  currentData.subscribe(_ => updateMap('data'));\n  currentLevel.subscribe(s => {\n    label_states();\n    updateMap('data');\n  });\n  signalType.subscribe(_ => updateMap('signal'));\n  encoding.subscribe(_ => updateMap('encoding'));\n  mounted.subscribe(_ => updateMap('mounted'));\n  currentDate.subscribe(_ => {\n    if (\n      $currentData.length > 0 &&\n      ($currentData[0].sensor !== $currentSensor || $currentData[0].level !== $currentLevel)\n    ) {\n      return;\n    }\n    updateMap('data');\n  });\n\n  function updateMap(type) {\n    if (!mapMounted) return;\n\n    // Reset all hover/click states.\n    [...Object.keys($levels), 'mega-county'].forEach(level => map && map.removeFeatureState({ source: level }));\n\n    // If we're looking at counties, draw the mega-county states.\n    let drawMega = $currentLevel === 'county';\n\n    // Get the range for the heatmap.\n    let thisStats;\n    let valueMinMax;\n\n    // Customize min max values for deaths\n    if ($currentSensor.match(/num/)) {\n      thisStats = $stats.get($currentSensor + '_' + $currentLevel);\n      valueMinMax = [Math.max(0.14, thisStats.mean - 3 * thisStats.std), thisStats.mean + 3 * thisStats.std];\n    } else {\n      thisStats = $stats.get($currentSensor);\n      valueMinMax = [thisStats.mean - 3 * thisStats.std, thisStats.mean + 3 * thisStats.std];\n    }\n\n    currentRange.set($signalType === 'value' ? valueMinMax : [-1, 1]);\n\n    let valueMappedVals = new Map();\n    let directionMappedVals = new Map();\n    let valueMappedMega = new Map();\n    let directionMappedMega = new Map();\n\n    // Get the GEO_IDS and value/directions from the API data, including mega counties if necessary.\n    let geoIds = new Set(\n      $currentData.map(d => {\n        const key = d.geo_value.toUpperCase();\n        const megaIndicator = key.slice(-3) + '';\n        const megaKey = key.slice(0, 2) + '';\n\n        if (d.value !== null) {\n          let info;\n          if ($currentSensor.match(/confirmed/) || $currentSensor.match(/deaths/)) {\n            info = [d.avg, d.count];\n          } else {\n            info = [d.value];\n          }\n          if (drawMega && megaIndicator === '000') {\n            valueMappedMega.set(megaKey, info);\n          } else {\n            valueMappedVals.set(key, info);\n          }\n        }\n        if (d.direction !== null) {\n          if (drawMega && megaIndicator === '000') {\n            directionMappedMega.set(megaKey, d.direction);\n          } else {\n            directionMappedVals.set(key, d.direction);\n          }\n        }\n        return key;\n      }),\n    );\n\n    let megaDat = $geojsons.get('state');\n    if (drawMega) {\n      megaDat.features.forEach(d => {\n        const id = d.properties.STATE;\n\n        d.properties.value = -100;\n        d.properties.direction = -100;\n\n        if (geoIds.has(id + '000') && valueMappedMega.get(id) !== undefined) {\n          d.properties.value = valueMappedMega.get(id)[0];\n\n          if ($currentSensor.match(/7dav_incidence/)) {\n            d.properties.value = valueMappedMega.get(id)[0]; // 7-day avg\n            d.properties.value1 = valueMappedMega.get(id)[1]; // count\n          }\n        }\n        if (geoIds.has(id + '000') && directionMappedMega.get(id) !== undefined) {\n          d.properties.direction = directionMappedMega.get(id);\n        }\n      });\n    }\n\n    let dat = $geojsons.get($currentLevel);\n    let centerDat = $geojsons.get(center($currentLevel));\n\n    // set the value of the chosen sensor to each states/counties\n    // dat: data for cholopleth\n    // centerDat: data for bubbles\n    [dat, centerDat].forEach(ds => {\n      ds.features.forEach(d => {\n        const id = d.properties.id;\n\n        d.properties.value = -100;\n        d.properties.direction = -100;\n        if (geoIds.has(id) && valueMappedVals.get(id) !== undefined) {\n          d.properties.value = valueMappedVals.get(id)[0];\n\n          if ($currentSensor.match(/7dav_incidence/)) {\n            d.properties.value = valueMappedVals.get(id)[0];\n            d.properties.value1 = valueMappedVals.get(id)[1];\n          }\n        }\n        if (geoIds.has(id) && directionMappedVals.get(id) !== undefined) {\n          d.properties.direction = directionMappedVals.get(id);\n        }\n      });\n    });\n\n    let stops, stopsMega, currentRadiusScale;\n\n    if ($signalType === 'value') {\n      valueMinMax[0] = Math.max(0, valueMinMax[0]);\n      let center = valueMinMax[0] + (valueMinMax[1] - valueMinMax[0]) / 2;\n      let firstHalfCenter = valueMinMax[0] + (center - valueMinMax[0]) / 2;\n      let secondHalfCenter = center + (valueMinMax[1] - center) / 2;\n\n      let colorScaleLinear = d3.scaleSequential(d3.interpolateYlOrRd).domain([valueMinMax[0], valueMinMax[1]]);\n\n      const c1 = d3.rgb(colorScaleLinear(valueMinMax[0]));\n      const c2 = d3.rgb(colorScaleLinear(firstHalfCenter));\n      const c3 = d3.rgb(colorScaleLinear(center));\n      const c4 = d3.rgb(colorScaleLinear(secondHalfCenter));\n      const c5 = d3.rgb(colorScaleLinear(valueMinMax[1]));\n      c1.opacity = 0.5;\n      c2.opacity = 0.5;\n      c3.opacity = 0.5;\n      c4.opacity = 0.5;\n      c5.opacity = 0.5;\n\n      if ($currentSensor.match(/num/)) {\n        let min = Math.log(Math.max(0.14, valueMinMax[0])) / Math.log(10);\n        let max = Math.log(valueMinMax[1]) / Math.log(10);\n        let arr = logspace(min, max, 7);\n        const colorScaleLog = d3\n          .scaleSequentialLog(d3.interpolateYlOrRd)\n          .domain([Math.max(0.14, valueMinMax[0]), valueMinMax[1]]);\n\n        let tempStops = [[0, DIRECTION_THEME.countMin]];\n        for (let i = 0; i < arr.length; i++) {\n          tempStops.push([arr[i], colorScaleLog(arr[i])]);\n        }\n        stops = tempStops;\n        stopsMega = [\n          [0, DIRECTION_THEME.countMin],\n          [valueMinMax[0], c1.toString()],\n          [firstHalfCenter, c2.toString()],\n          [center, c3.toString()],\n          [secondHalfCenter, c4.toString()],\n          [valueMinMax[1], c5.toString()],\n        ];\n\n        const minRadius = ENCODING_BUBBLE_THEME.minRadius[$currentLevel],\n          maxRadius = ENCODING_BUBBLE_THEME.maxRadius[$currentLevel];\n\n        currentRadiusScale = logScale()\n          .domain(colorScaleLog.domain())\n          .range([minRadius, maxRadius])\n          .base(ENCODING_BUBBLE_THEME.base);\n        radiusScale.set(currentRadiusScale);\n      } else if ($currentSensor.match(/prop/)) {\n        stops = [\n          [0, DIRECTION_THEME.countMin],\n          [valueMinMax[0], colorScaleLinear(valueMinMax[0])],\n          [firstHalfCenter, colorScaleLinear(firstHalfCenter)],\n          [center, colorScaleLinear(center)],\n          [secondHalfCenter, colorScaleLinear(secondHalfCenter)],\n          [valueMinMax[1], colorScaleLinear(valueMinMax[1])],\n        ];\n        stopsMega = [\n          [0, DIRECTION_THEME.countMin],\n          [valueMinMax[0], c1.toString()],\n          [firstHalfCenter, c2.toString()],\n          [center, c3.toString()],\n          [secondHalfCenter, c4.toString()],\n          [valueMinMax[1], c5.toString()],\n        ];\n      } else {\n        stops = [\n          [valueMinMax[0], colorScaleLinear(valueMinMax[0])],\n          [firstHalfCenter, colorScaleLinear(firstHalfCenter)],\n          [center, colorScaleLinear(center)],\n          [secondHalfCenter, colorScaleLinear(secondHalfCenter)],\n          [valueMinMax[1], colorScaleLinear(valueMinMax[1])],\n        ];\n        stopsMega = [\n          [valueMinMax[0], c1.toString()],\n          [firstHalfCenter, c2.toString()],\n          [center, c3.toString()],\n          [secondHalfCenter, c4.toString()],\n          [valueMinMax[1], c5.toString()],\n        ];\n      }\n    } else {\n      stops = [\n        [-100, MAP_THEME.countyFill],\n        [-1, DIRECTION_THEME.decreasing],\n        [0, DIRECTION_THEME.steady],\n        [1, DIRECTION_THEME.increasing],\n      ];\n      stopsMega = [\n        [-100, MAP_THEME.countyFill],\n        [-1, DIRECTION_THEME.gradientMinMega],\n        [0, DIRECTION_THEME.gradientMiddleMega],\n        [1, DIRECTION_THEME.gradientMaxMega],\n      ];\n    }\n\n    if (['data', 'init'].includes(type)) {\n      map.getSource($currentLevel).setData(dat);\n      map.getSource(center($currentLevel)).setData(centerDat);\n      drawMega ? map.getSource('mega-county').setData(megaDat) : '';\n    }\n\n    if ($encoding == 'color') {\n      // hide all bubble layers\n      Object.keys($levels).forEach(name => {\n        map.setLayoutProperty(center(name), 'visibility', 'none');\n        map.setLayoutProperty(centerHighlight(name), 'visibility', 'none');\n      });\n\n      Object.keys($levels).forEach(name => {\n        if (name === $currentLevel) {\n          if (map.getLayer(name)) {\n            map.setPaintProperty(name, 'fill-color', {\n              property: $signalType,\n              stops: stops,\n            });\n            map.setLayoutProperty(name, 'visibility', 'visible');\n          }\n        } else {\n          map.getLayer(name) && map.setLayoutProperty(name, 'visibility', 'none');\n        }\n      });\n      if (drawMega) {\n        map.setPaintProperty('mega-county', 'fill-color', {\n          property: $signalType,\n          stops: stopsMega,\n        });\n        map.setLayoutProperty('mega-county', 'visibility', 'visible');\n      } else {\n        map.setLayoutProperty('mega-county', 'visibility', 'none');\n      }\n    } else if ($encoding == 'bubble') {\n      // hide all color layers except for the one for the current level (for tooltip)\n      Object.keys($levels).forEach(name => map.getLayer(name) && map.setLayoutProperty(name, 'visibility', 'none'));\n      if (map.getLayer($currentLevel)) {\n        map.setPaintProperty($currentLevel, 'fill-color', MAP_THEME.countyFill);\n\n        map.setLayoutProperty($currentLevel, 'visibility', 'visible');\n      }\n\n      // hide all bubble layer except for the one for the current level\n      Object.keys($levels).forEach(name => {\n        map.setLayoutProperty(center(name), 'visibility', 'none');\n        map.setLayoutProperty(centerHighlight(name), 'visibility', 'none');\n      });\n      if (map.getLayer(center($currentLevel))) {\n        const flatten = arr => arr.reduce((acc, val) => acc.concat(val), []);\n\n        // color scale (color + stroke color)\n\n        let flatStops = flatten(stops);\n        flatStops.shift(); // remove the first element which has a value of 0 since the \"step\" expression of mapbox does not require it.\n\n        flatStops[0] = 'transparent';\n        let colorExpression = ['step', ['get', 'value']].concat(flatStops);\n\n        map.setPaintProperty(center($currentLevel), 'circle-stroke-color', colorExpression);\n        map.setPaintProperty(centerHighlight($currentLevel), 'circle-stroke-color', colorExpression);\n\n        map.setPaintProperty(center($currentLevel), 'circle-color', colorExpression);\n        map.setPaintProperty(centerHighlight($currentLevel), 'circle-color', colorExpression);\n\n        // radius scale\n        const [a, b, base] = currentRadiusScale.coef();\n        const baseLog = Math.log10(base);\n\n        let radiusExpression = ['+', ['*', a, ['/', ['log10', ['get', 'value']], baseLog]], b];\n\n        map.setPaintProperty(center($currentLevel), 'circle-radius', radiusExpression);\n        map.setPaintProperty(centerHighlight($currentLevel), 'circle-radius', radiusExpression);\n\n        map.setLayoutProperty(center($currentLevel), 'visibility', 'visible');\n        map.setLayoutProperty(centerHighlight($currentLevel), 'visibility', 'visible');\n      }\n\n      map.setLayoutProperty('mega-county', 'visibility', 'none');\n    }\n\n    const viableFeatures = dat.features.filter(f => f.properties[$signalType] !== -100);\n\n    // set a random focus on start up\n    if (chosenRandom === false && $mounted) {\n      if (viableFeatures.length > 0) {\n        const found = viableFeatures.filter(\n          f =>\n            f.properties.id === defaultRegionOnStartup.county ||\n            f.properties.id === defaultRegionOnStartup.msa ||\n            f.properties.id === defaultRegionOnStartup.state,\n        );\n        if (found.length > 0) {\n          // found Allegheny / Pittsburgh\n          const randomFeature = found[0];\n          if ($currentRegion === '') {\n            currentRegionName.set(randomFeature.properties.NAME);\n            currentRegion.set(randomFeature.id);\n            clickedId = randomFeature.id;\n            map.setFeatureState({ source: $currentLevel, id: clickedId }, { select: true });\n            map.setFeatureState({ source: center($currentLevel), id: clickedId }, { select: true });\n          }\n          chosenRandom = true;\n        } else {\n          const index = Math.floor(Math.random() * (viableFeatures.length - 1));\n          const randomFeature = viableFeatures[index];\n          currentRegionName.set(randomFeature.properties.NAME);\n          currentRegion.set(randomFeature.properties.id);\n\n          clickedId = randomFeature.id;\n          map.setFeatureState({ source: $currentLevel, id: clickedId }, { select: true });\n          map.setFeatureState({ source: center($currentLevel), id: clickedId }, { select: true });\n          chosenRandom = true;\n        }\n      }\n    }\n\n    if ($currentRegion) {\n      const megaFound = megaDat.features.filter(f => f.properties.STATE + '000' === $currentRegion + '');\n      const found = viableFeatures.filter(f => f.properties.id === $currentRegion);\n      if (megaFound.length > 0) {\n        megaClickedId = parseInt(megaFound[0].properties.STATE);\n        currentRegionName.set(megaFound[0].properties.NAME);\n        map.setFeatureState({ source: 'mega-county', id: megaClickedId }, { select: true });\n      }\n      if (found.length > 0) {\n        clickedId = found[0].id;\n        currentRegionName.set(found[0].properties.NAME);\n        map.setFeatureState({ source: $currentLevel, id: clickedId }, { select: true });\n        map.setFeatureState({ source: center($currentLevel), id: clickedId }, { select: true });\n      }\n    }\n  }\n\n  function get_label_specifics(name, state, level) {\n    let text = '';\n    if ($currentLevel === 'county' && level !== 'mega-county' && !special_counties.includes(name)) {\n      text += ' County';\n    }\n    if (level === 'county') {\n      text += ', ' + dict[state];\n    }\n    return text;\n  }\n\n  function label_states() {\n    if (map !== undefined) {\n      if ($currentLevel == 'state') {\n        map.setLayoutProperty('state-names', 'visibility', 'visible');\n      } else {\n        map.setLayoutProperty('state-names', 'visibility', 'none');\n      }\n    }\n  }\n\n  function initializeMap() {\n    let lon = LON,\n      lat = LAT,\n      zoom = ZOOM;\n\n    if ($currentZone === 'swpa') {\n      lon = SWPA_LON;\n      lat = SWPA_LAT;\n      zoom = SWPA_ZOOM;\n    }\n\n    map = new mapboxgl.Map({\n      attributionControl: false,\n      container,\n      style: './maps/mapbox_albers_usa_style.json',\n      center: [lon, lat],\n      zoom: zoom,\n      minZoom: ZOOM - 1,\n    })\n      .addControl(new mapboxgl.AttributionControl({ compact: true }))\n      .addControl(new mapboxgl.NavigationControl({ showCompass: false }), 'top-right');\n\n    //Disable touch zoom, it makes gesture scrolling difficult\n    map.scrollZoom.disable();\n\n    popup = new mapboxgl.Popup({\n      closeButton: false,\n      closeOnClick: false,\n      className: 'map-popup',\n    });\n    map.on('mousemove', 'state-outline', onMouseMove('state-outline'));\n    map.on('mouseleave', 'state-outline', onMouseLeave('state-outline'));\n\n    [...Object.keys($levels), 'mega-county'].forEach(level => {\n      map.on('mouseenter', level, onMouseEnter(level));\n      map.on('mousemove', level, onMouseMove(level));\n      map.on('mouseleave', level, onMouseLeave(level));\n      map.on('click', level, onClick(level));\n    });\n\n    map.on('idle', ev => {\n      currentDataReadyOnMap.set(true);\n      mapFirstLoaded.set(true);\n    });\n\n    map.on('error', ev => {\n      mapFirstLoaded.set(true);\n    });\n\n    map.on('load', function() {\n      map.addSource('county-outline', {\n        type: 'geojson',\n        data: $geojsons.get('county'),\n      });\n      map.addSource('state-outline', {\n        type: 'geojson',\n        data: $geojsons.get('state'),\n      });\n      map.addSource('city-point', {\n        type: 'geojson',\n        data: $geojsons.get('city'),\n      });\n      map.addSource('mega-county', {\n        type: 'geojson',\n        data: $geojsons.get('state'),\n      });\n      map.addSource('zone-outline', {\n        type: 'geojson',\n        data: $geojsons.get('zone'),\n      });\n\n      Object.keys($levels).forEach(level => {\n        map.addSource(center(level), {\n          type: 'geojson',\n          data: $geojsons.get(center(level)),\n        });\n      });\n\n      map.addLayer({\n        id: 'county-outline',\n        source: 'county-outline',\n        type: 'fill',\n        paint: {\n          'fill-color': MAP_THEME.countyFill,\n          'fill-outline-color': MAP_THEME.countyOutline,\n          'fill-opacity': 0.4,\n        },\n      });\n\n      map.addLayer({\n        id: 'state-outline',\n        source: 'state-outline',\n        type: 'fill',\n        paint: {\n          'fill-color': 'rgba(0, 0, 0, 0)',\n          'fill-outline-color': MAP_THEME.stateOutline,\n        },\n      });\n\n      Object.keys($levels).forEach(name => {\n        const data = $geojsons.get(name);\n        map.addSource(name, {\n          type: 'geojson',\n          data: $geojsons.get(name),\n        });\n      });\n\n      ['mega-county', ...Object.keys($levels)].forEach(name => {\n        map.addLayer({\n          id: `${name}-hover`,\n          source: name,\n          type: 'line',\n          paint: {\n            'line-color': MAP_THEME.hoverRegionOutline,\n            'line-width': ['case', ['any', ['boolean', ['feature-state', 'hover'], false]], 4, 0],\n          },\n        });\n\n        map.addLayer({\n          id: `${name}-selected`,\n          source: name,\n          type: 'line',\n          paint: {\n            'line-color': MAP_THEME.selectedRegionOutline,\n            'line-width': ['case', ['any', ['boolean', ['feature-state', 'select'], false]], 4, 0],\n          },\n        });\n      });\n\n      map.addLayer({\n        id: 'state-names',\n        source: center('state'),\n        type: 'symbol',\n        maxzoom: 8,\n        layout: {\n          'text-field': ['upcase', ['get', 'NAME']],\n          'text-font': ['Open Sans Bold'],\n          'text-size': 11,\n        },\n        paint: {\n          'text-opacity': 0.5,\n          'text-halo-color': '#fff',\n          'text-halo-width': 1,\n        },\n      });\n\n      map.addLayer(\n        {\n          id: 'city-point-unclustered-pit',\n          source: 'city-point',\n          type: 'symbol',\n          filter: ['==', 'city', 'Pittsburgh'],\n          maxzoom: 8,\n          layout: {\n            'text-field': ['get', 'city'],\n            'text-font': ['Open Sans Regular'],\n            'text-size': 12,\n          },\n          paint: {\n            'text-halo-color': '#fff',\n            'text-halo-width': 1.5,\n          },\n        },\n        'state-names',\n      );\n      map.addLayer(\n        {\n          id: 'city-point-unclustered',\n          source: 'city-point',\n          type: 'symbol',\n          filter: ['>', 'population', 900000],\n          maxzoom: 4,\n          layout: {\n            'text-field': ['get', 'city'],\n            'text-font': ['Open Sans Regular'],\n            'text-size': 12,\n          },\n          paint: {\n            'text-halo-color': '#fff',\n            'text-halo-width': 1.5,\n          },\n        },\n        'state-names',\n      );\n      map.addLayer(\n        {\n          id: 'city-point-unclustered-2',\n          source: 'city-point',\n          type: 'symbol',\n          filter: ['>', 'population', 500000],\n          maxzoom: 6,\n          minzoom: 4,\n          layout: {\n            'text-field': ['get', 'city'],\n            'text-font': ['Open Sans Regular'],\n            'text-size': 12,\n          },\n          paint: {\n            'text-halo-color': '#fff',\n            'text-halo-width': 1.5,\n          },\n        },\n        'state-names',\n      );\n      map.addLayer({\n        id: 'city-point-unclustered-3',\n        source: 'city-point',\n        type: 'symbol',\n        filter: ['>', 'population', 100000],\n        maxzoom: 8,\n        minzoom: 6,\n        layout: {\n          'text-field': ['get', 'city'],\n          'text-font': ['Open Sans Regular'],\n          'text-size': 12,\n        },\n        paint: {\n          'text-halo-color': '#fff',\n          'text-halo-width': 1.5,\n        },\n      });\n      map.addLayer(\n        {\n          id: 'city-point-unclustered-4',\n          source: 'city-point',\n          type: 'symbol',\n          minzoom: 8,\n          layout: {\n            'text-field': ['get', 'city'],\n            'text-font': ['Open Sans Regular'],\n            'text-size': 12,\n          },\n          paint: {\n            'text-halo-color': '#fff',\n            'text-halo-width': 1.5,\n          },\n        },\n        'state-names',\n      );\n\n      label_states();\n\n      map.addLayer(\n        {\n          id: 'mega-county',\n          source: 'mega-county',\n          type: 'fill',\n          visibility: 'none',\n          filter: ['!=', $signalType, -100],\n          paint: {\n            'fill-outline-color': MAP_THEME.countyOutlineWhenFilled,\n            'fill-color': MAP_THEME.countyFill,\n          },\n        },\n        `mega-county-hover`,\n      );\n\n      Object.keys($levels).forEach(level => {\n        map.addLayer(\n          {\n            id: level,\n            source: level,\n            type: 'fill',\n            visibility: 'none',\n            filter: ['!=', $signalType, -100],\n            paint: {\n              'fill-outline-color': MAP_THEME.countyOutlineWhenFilled,\n              'fill-color': MAP_THEME.countyFill,\n            },\n          },\n          `${level}-hover`,\n        );\n      });\n\n      Object.keys($levels).forEach(level => {\n        map.addLayer(\n          {\n            id: center(level),\n            source: center(level),\n            type: 'circle',\n            visibility: 'none',\n            filter: ['>', ['get', 'value'], 0],\n            paint: {\n              'circle-radius': 0,\n              'circle-color': ENCODING_BUBBLE_THEME.color,\n              'circle-stroke-color': ENCODING_BUBBLE_THEME.strokeColor,\n              'circle-stroke-width': ENCODING_BUBBLE_THEME.strokeWidth,\n              'circle-opacity': [\n                'case',\n                [\n                  'any',\n                  ['boolean', ['feature-state', 'hover'], false],\n                  ['boolean', ['feature-state', 'select'], false],\n                ],\n                0,\n                ENCODING_BUBBLE_THEME.opacity,\n              ],\n              'circle-stroke-opacity': [\n                'case',\n                [\n                  'any',\n                  ['boolean', ['feature-state', 'hover'], false],\n                  ['boolean', ['feature-state', 'select'], false],\n                ],\n                0,\n                ENCODING_BUBBLE_THEME.strokeOpacity,\n              ],\n            },\n          },\n          `${level}-hover`,\n        );\n\n        map.addLayer(\n          {\n            id: centerHighlight(level),\n            source: center(level),\n            type: 'circle',\n            visibility: 'none',\n            filter: ['>', ['get', 'value'], 0],\n            paint: {\n              'circle-radius': 0,\n              'circle-color': ENCODING_BUBBLE_THEME.color,\n              'circle-stroke-color': ENCODING_BUBBLE_THEME.strokeColor,\n              'circle-stroke-width': ENCODING_BUBBLE_THEME.strokeWidthHovered,\n              'circle-opacity': [\n                'case',\n                [\n                  'any',\n                  ['boolean', ['feature-state', 'hover'], false],\n                  ['boolean', ['feature-state', 'select'], false],\n                ],\n                ENCODING_BUBBLE_THEME.opacity,\n                0,\n              ],\n              'circle-stroke-opacity': [\n                'case',\n                [\n                  'any',\n                  ['boolean', ['feature-state', 'hover'], false],\n                  ['boolean', ['feature-state', 'select'], false],\n                ],\n                ENCODING_BUBBLE_THEME.strokeOpacity,\n                0,\n              ],\n            },\n          },\n          'city-point-unclustered-pit',\n        );\n      });\n\n      if ($currentZone === 'swpa') {\n        showZoneBoundary('swpa');\n      }\n\n      mapMounted = true;\n      updateMap('init');\n    });\n  }\n\n  function showZoneBoundary(zoneName) {\n    if (zoneName === 'swpa') {\n      map.addLayer({\n        id: 'zone-outline',\n        source: 'zone-outline',\n        type: 'line',\n        paint: {\n          'line-color': MAP_THEME.zoneOutline,\n          'line-width': 2,\n          'line-dasharray': [2, 2],\n        },\n      });\n    }\n  }\n\n  function searchElement(selectedRegion) {\n    let hasValueFlag = false;\n    const availLevels = $sensorMap.get($currentSensor).levels;\n    for (let i = 0; i < availLevels.length; i++) {\n      if (selectedRegion['level'] === availLevels[i]) {\n        hasValueFlag = true;\n        break;\n      }\n    }\n    if (!hasValueFlag) {\n      invalidSearch = true;\n      searchErrorComponent.count();\n    } else {\n      if (selectedRegion['level'] !== $currentLevel) {\n        currentDataReadyOnMap.set(false);\n        currentLevel.set(selectedRegion['level']);\n      }\n      if (clickedId) {\n        map.setFeatureState({ source: $currentLevel, id: clickedId }, { select: false });\n      }\n      if (megaClickedId) {\n        map.setFeatureState({ source: 'mega-county', id: megaClickedId }, { select: false });\n      }\n\n      megaClickedId = null;\n      currentRegionName.set(selectedRegion['name']);\n      currentRegion.set(selectedRegion['property_id']);\n      clickedId = parseInt(selectedRegion['id']);\n      map.setFeatureState({ source: $currentLevel, id: clickedId }, { select: true });\n      map.setFeatureState({ source: center($currentLevel), id: clickedId }, { select: true });\n\n      // Get zoom and center of selected location\n      let centersData = $geojsons.get(center($currentLevel))['features'];\n      let center_location;\n      for (let i = 0; i < centersData.length; i++) {\n        let info = centersData[i];\n        if (info['properties']['id'] == selectedRegion['property_id']) {\n          center_location = info['geometry']['coordinates'];\n          break;\n        }\n      }\n\n      let zoomLevel;\n      if (selectedRegion['level'] === 'county') {\n        zoomLevel = 6.5;\n      } else if (selectedRegion['level'] === 'msa') {\n        zoomLevel = 6;\n      } else {\n        zoomLevel = 5;\n      }\n\n      map.flyTo({ center: center_location, zoom: zoomLevel, essential: true });\n    }\n  }\n</script>\n\n<style>\n  .banner {\n    font-size: 20px;\n    top: 12px;\n    position: absolute;\n    line-height: 1.2em;\n    font-weight: 600;\n    text-align: center;\n    align-items: center;\n    pointer-events: none;\n    left: 0;\n    right: 0;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .map-container {\n    width: 100%;\n    height: 80vh;\n    position: relative;\n    top: 50px;\n    min-height: 550px;\n  }\n\n  .state-buttons-holder {\n    position: absolute;\n    top: 79px;\n    right: 9px;\n    z-index: 100;\n  }\n\n  #swpa-button-holder.state-buttons-holder {\n    position: absolute;\n    top: 120px;\n    right: 9px;\n    z-index: 100;\n  }\n\n  #swpa-button-holder.state-buttons-holder button {\n    font-size: 9px;\n  }\n\n  .state-buttons-holder button:focus {\n    outline: none;\n  }\n\n  .state-buttons-holder .pg-button {\n    font-size: 23px;\n    position: relative;\n    width: 28px;\n    height: 28px;\n    color: #333;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0;\n    box-sizing: content-box;\n    text-align: center;\n    font-family: 'FranklinITCProBold', Helvetica, Arial, sans-serif;\n    line-height: 16px;\n    cursor: pointer;\n    text-decoration: none;\n    user-select: none;\n    transition-delay: 0s;\n    transition-duration: 0.15s;\n    transition-property: background-color;\n    transition-timing-function: ease-in-out;\n\n    /* rounded design refresh */\n    border: 2px solid #dedede;\n    border-radius: 4px;\n    background-color: #ffffff;\n  }\n\n  .state-buttons-holder .pg-button:hover {\n    background-color: #f2f2f2;\n  }\n\n  .state-buttons-holder .pg-button img {\n    width: 90%;\n  }\n\n  .options-container {\n    position: absolute;\n    top: 12px;\n    left: 10px;\n    max-width: 650px;\n    z-index: 1001;\n    padding: 8px 8px;\n    box-sizing: border-box;\n    transition: all 0.1s ease-in;\n\n    /* rounded design refresh */\n    border-radius: 7px;\n    background-color: rgba(255, 255, 255, 0.9);\n    box-shadow: 0px 4px 10px rgba(151, 151, 151, 0.25);\n\n    font-family: 'Open Sans', Helvetica, sans-serif !important;\n  }\n\n  .search-container {\n    position: absolute;\n    width: 400px;\n    right: 75px;\n    top: 12px;\n    z-index: 1001;\n\n    background-color: #fff;\n    box-shadow: 0px 4px 30px rgba(151, 151, 151, 0.25);\n    border-radius: 7px;\n\n    display: flex;\n  }\n\n  .search-icon-container {\n    flex-shrink: 0;\n    width: 30px;\n    height: 44px;\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n  }\n\n  .search-icon {\n    width: 20px;\n    height: 20px;\n    color: #9b9b9b;\n  }\n\n  .search {\n    flex-grow: 1;\n    font-size: 14px;\n  }\n\n  .legend-container {\n    position: absolute;\n    bottom: 12px;\n    left: 10px;\n    z-index: 1000;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.1s ease-in;\n    /*height: 105px;*/\n\n    /* rounded design refresh */\n    border-radius: 7px;\n    background-color: #ffffff;\n    box-shadow: 0px 4px 10px rgba(151, 151, 151, 0.25);\n  }\n\n  .invalid_search-container {\n    position: absolute;\n    transition: opacity 0.3s ease-in-out;\n    z-index: 1003;\n    top: 12px;\n    width: 250px;\n    background-color: rgba(255, 255, 255, 0.9);\n    left: 0;\n    right: 0;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .time-container {\n    position: absolute;\n    bottom: 12px;\n    right: 10px;\n    z-index: 1002;\n    padding: 30px 10px;\n    box-sizing: border-box;\n    transition: all 0.1s ease-in;\n\n    /* rounded design refresh */\n    border-radius: 7px;\n    background-color: #ffffff;\n    box-shadow: 0px 4px 10px rgba(151, 151, 151, 0.25);\n  }\n</style>\n\n<div class=\"banner\">\n  <span class=\"banner-text\">{currentSensorTooltip}</span>\n</div>\n\n<div bind:this={container} class=\"map-container\">\n  <div class=\"options-container\">\n    <Options {isIE} />\n  </div>\n\n  {#if loaded && regionList.length != 0}\n    <div class=\"search-container\">\n      <div class=\"search-icon-container\">\n        <div class=\"search-icon\">\n          <IoIosSearch />\n        </div>\n      </div>\n      <div class=\"search\">\n        <AutoComplete\n          className=\"search-bar\"\n          placeholder=\"Search for a location...\"\n          items={regionList}\n          bind:selectedItem={selectedRegion}\n          labelFieldName=\"display_name\"\n          maxItemsToShowInList=\"5\"\n          onChange={_ => {\n            if (typeof selectedRegion !== 'undefined') {\n              searchElement(selectedRegion);\n            }\n          }} />\n      </div>\n    </div>\n  {/if}\n\n  <div class=\"legend-container\">\n    <Legend />\n  </div>\n\n  <div class=\"invalid_search-container\">\n    <Banner bind:this={searchErrorComponent} />\n  </div>\n\n  <div class=\"state-buttons-holder\">\n    <button\n      aria-label=\"show entire map\"\n      data-state=\"us48\"\n      id=\"bounds-button\"\n      class=\"pg-button bounds-button\"\n      on:click={_ => {\n        map.easeTo({ center: [LON, LAT], zoom: ZOOM, bearing: 0, pitch: 0 });\n      }}>\n      <img src=\"./assets/imgs/us48.png\" alt=\"\" />\n    </button>\n  </div>\n\n  {#if $currentZone.length > 0}\n    <div class=\"state-buttons-holder\" id=\"swpa-button-holder\">\n      <button\n        aria-label=\"show swpa boundary\"\n        class=\"pg-button bounds-button\"\n        on:click={_ => {\n          map.easeTo({ center: [SWPA_LON, SWPA_LAT], zoom: SWPA_ZOOM, bearing: 0, pitch: 0 });\n          showZoneBoundary('swpa');\n        }}>\n        SWPA\n      </button>\n    </div>\n  {/if}\n\n  <div class=\"time-container\">\n    <Time />\n  </div>\n\n  <GraphContainer {isIE} {graphShowStatus} {toggleGraphShowStatus} />\n</div>\n",
    "<script>\n  import { writable } from 'svelte/store';\n  import { onMount } from 'svelte';\n\n  import {\n    sensorMap,\n    currentSensor,\n    levels,\n    currentLevel,\n    signalType,\n    currentDataReadyOnMap,\n    encoding,\n    currentDate,\n    times,\n  } from './stores.js';\n  import Calendar from 'svelte-calendar';\n  import * as d3 from 'd3';\n\n  let hide = false;\n  let shouldDisplayBanner = true;\n  let formatTime = d3.timeFormat('%B %-d, %Y');\n  let convertDate = d3.timeFormat('%Y%m%d');\n  let parseTime = d3.timeParse('%Y%m%d');\n\n  $: sensor = $currentSensor;\n  $: level = $currentLevel;\n  // let selectedDate = writable(parseTime($currentDate));\n  $: selectedDate = parseTime($currentDate);\n  if ($currentDate !== 20100420) {\n    selectedDate = parseTime($currentDate);\n  }\n  $: start_end_dates = [];\n\n  currentSensor.subscribe(s => {\n    if ($sensorMap.get($currentSensor).levels.includes(level) === false) {\n      level = $levels['msa'];\n    }\n    if (!$currentSensor.match(/num/)) {\n      encoding.set('color');\n    }\n  });\n\n  $: if (selectedDate !== undefined) {\n    currentDate.set(convertDate(selectedDate));\n  }\n  $: if ($times !== null) {\n    start_end_dates = $times.get($currentSensor);\n  }\n\n  export let isIE;\n\n  function make_plural(level) {\n    if (level === 'State') {\n      return 'States';\n    } else if (level === 'County') {\n      return 'Counties';\n    } else if (level === 'Metro Area') {\n      return 'Metro Areas';\n    }\n  }\n</script>\n\n<style>\n  .options {\n    font-size: 0.8rem;\n    width: 100%;\n    position: relative;\n  }\n\n  .option {\n    width: 100%;\n    display: inline-block;\n  }\n\n  .option .option-title {\n    margin-left: 5px;\n    margin-right: 5px;\n    color: #444;\n    margin-bottom: 0px !important;\n    padding-bottom: 0px !important;\n  }\n\n  label {\n    display: inline-block;\n  }\n\n  select {\n    background-color: #ececec;\n    border-radius: 5px;\n    border: none;\n    color: #111;\n    line-height: 1.3;\n    padding: 0.4em 1.4em 0.4em 0.8em;\n\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    appearance: none;\n\n    background-image: linear-gradient(45deg, transparent 50%, gray 50%),\n      linear-gradient(135deg, gray 50%, transparent 50%);\n    background-position: calc(100% - 15px) calc(0.85em + 0px), calc(100% - 10px) calc(0.85em + 0px);\n    background-size: 5px 5px, 5px 5px;\n    background-repeat: no-repeat;\n\n    transition: all 0.1s ease-in;\n  }\n\n  select:hover {\n    background-color: #dcdcdc;\n  }\n\n  select.indicators {\n    display: inline-block;\n    width: 230px;\n  }\n\n  select.geo-level {\n    display: inline-block;\n    width: 125px;\n  }\n  .calendar {\n    display: inline-block;\n  }\n\n  @keyframes shake {\n    10%,\n    90% {\n      transform: translate3d(-1px, 0, 0);\n    }\n\n    20%,\n    80% {\n      transform: translate3d(2px, 0, 0);\n    }\n\n    30%,\n    50%,\n    70% {\n      transform: translate3d(-4px, 0, 0);\n    }\n\n    40%,\n    60% {\n      transform: translate3d(4px, 0, 0);\n    }\n  }\n</style>\n\n<div class=\"options\">\n\n  <div class=\"option\">\n    <label style=\"font-size: 15px;\" class=\"option-title\">Displaying</label>\n    <select\n      aria-label=\"indicator options\"\n      class=\"indicators\"\n      bind:value={sensor}\n      on:change={() => {\n        currentDataReadyOnMap.set(false);\n        currentSensor.set(sensor);\n        shouldDisplayBanner = true;\n      }}>\n      <optgroup label=\"Indicators\">\n        {#each Array.from($sensorMap.keys()).filter(d => !$sensorMap.get(d).official) as sensor}\n          <option title={$sensorMap.get(sensor).tooltipText} value={sensor}>{$sensorMap.get(sensor).name}</option>\n        {/each}\n      </optgroup>\n      <optgroup label=\"Official Reports\">\n        {#each Array.from($sensorMap.keys()).filter(d => $sensorMap.get(d).official) as sensor}\n          <option title={$sensorMap.get(sensor).tooltipText} value={sensor}>{$sensorMap.get(sensor).name}</option>\n        {/each}\n      </optgroup>\n    </select>\n\n    <label style=\"font-size: 15px;\" class=\"option-title\">for</label>\n\n    <select\n      aria-label=\"geographic level\"\n      class=\"geo-level\"\n      bind:value={level}\n      on:change={() => {\n        currentDataReadyOnMap.set(false);\n        currentLevel.set(level);\n      }}>\n      {#each Object.keys($levels) as level}\n        <option value={level} disabled={$sensorMap.get($currentSensor).levels.includes(level) === false}>\n          {make_plural($levels[level])}\n        </option>\n      {/each}\n    </select>\n\n    <label style=\"font-size: 15px;\" class=\"option-title\">on</label>\n\n    {#if selectedDate !== undefined && start_end_dates.length !== 0}\n      <Calendar bind:selected={selectedDate} start={parseTime(start_end_dates[0])} end={parseTime(start_end_dates[1])}>\n        <button class=\"calendar\" on:>\n          {#if selectedDate}{formatTime(selectedDate)}{:else}Select Date{/if}\n        </button>\n      </Calendar>\n    {/if}\n  </div>\n</div>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import {\n    currentDate,\n    times,\n    currentSensor,\n    currentDataReadyOnMap,\n    signalType,\n    currentLevel,\n    timeRangeOnSlider,\n    yesterday,\n  } from './stores.js';\n  import { calculateValFromRectified } from './util.js';\n  import * as d3 from 'd3';\n\n  let timeSliderPaddingLeft;\n  let timeSliderPaddingRight;\n  let timeSlider;\n  let selectedDateDisplay;\n\n  let parseTime = d3.timeParse('%Y%m%d');\n  let formatTime = d3.timeFormat('%B %-d, %Y');\n  let formatTimeWithoutYear = d3.timeFormat('%B %-d');\n\n  let interval = 14;\n  let sliderTotalLength = 320; // in px\n  let canLoadMore = true;\n\n  let playInterval;\n\n  let val = $currentDate;\n  let min = $currentDate;\n  let max = $currentDate;\n\n  let rectifiedVal = parseTime(val).getTime();\n  let rectifiedMax = parseTime(yesterday).getTime();\n\n  let rectifiedRange = interval;\n  let rectifiedMin = rectifiedMax - rectifiedRange * 86400 * 1000;\n\n  let dataRangeMin = parseTime(min).getTime();\n  let dataRangeMax = parseTime(max).getTime();\n\n  let prettyDate = '';\n  $: prettyDate = formatTime(new Date(rectifiedVal));\n  let weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  onMount(() => {\n    currentDate.subscribe(d => {\n      if (d === 20100420) return;\n      val = d;\n      rectifiedVal = parseTime(val).getTime();\n      if (rectifiedVal >= rectifiedMax) {\n        rectifiedVal = rectifiedMax;\n        currentDate.set(+calculateValFromRectified(rectifiedVal));\n      } else if (rectifiedVal < rectifiedMin) {\n        // rectifiedVal = rectifiedMin;\n        currentDate.set(+calculateValFromRectified(rectifiedVal));\n      }\n      updateSliderUI();\n    });\n  });\n\n  times.subscribe(t => (t ? update($currentSensor, t) : ''));\n  currentSensor.subscribe(s => ($times ? update(s, $times, true) : ''));\n  currentDate.subscribe(t => ($times ? update($currentSensor, $times) : ''));\n\n  function update(s, t, newSensor = false) {\n    max = t.get(s)[1];\n    min = t.get(s)[0];\n    dataRangeMin = parseTime(min).getTime();\n    dataRangeMax = parseTime(max).getTime();\n\n    if (\n      newSensor &&\n      dataRangeMin <= rectifiedMin &&\n      parseTime($currentDate).getTime() >= rectifiedMin &&\n      parseTime($currentDate).getTime() <= rectifiedMax\n    ) {\n      // console.log('fine not to change slider range');\n    } else {\n      rectifiedRange = interval;\n      rectifiedMin = rectifiedMax - rectifiedRange * 86400 * 1000;\n      if ($currentDate !== 20100420) {\n        while (parseTime($currentDate).getTime() < rectifiedMin) {\n          rectifiedRange += interval;\n          rectifiedMin = rectifiedMax - rectifiedRange * 86400 * 1000;\n        }\n      }\n      if (rectifiedMin < dataRangeMin) {\n        rectifiedMin = dataRangeMin;\n        rectifiedRange = (rectifiedMax - rectifiedMin) / (86400 * 1000);\n      }\n    }\n    updateSliderUI();\n  }\n\n  function updateSliderUI() {\n    if (dataRangeMax <= rectifiedMax && dataRangeMin >= rectifiedMin) {\n      /**\n       * fall within\n       *    -------------------\n       *        ---------\n       */\n      // console.log('within');\n      let leftPercentage = (dataRangeMin - rectifiedMin) / (rectifiedRange * 86400 * 1000);\n      let middlePercentage = (dataRangeMax - dataRangeMin) / (rectifiedRange * 86400 * 1000);\n      let rightPercentage = (rectifiedMax - dataRangeMax) / (rectifiedRange * 86400 * 1000);\n      // console.log(leftPercentage, middlePercentage, rightPercentage);\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', dataRangeMin);\n      timeSlider.setAttribute('max', dataRangeMax);\n      timeRangeOnSlider.set({\n        min: +calculateValFromRectified(dataRangeMin),\n        max: +calculateValFromRectified(dataRangeMax),\n      });\n      canLoadMore = false;\n    } else if (dataRangeMax <= rectifiedMax && dataRangeMin <= rectifiedMin) {\n      /**\n       *\n       *    -------------------\n       *  ---------\n       */\n      // console.log('left');\n      let leftPercentage = 0;\n      let middlePercentage = (dataRangeMax - rectifiedMin) / (rectifiedRange * 86400 * 1000);\n      let rightPercentage = (rectifiedMax - dataRangeMax) / (rectifiedRange * 86400 * 1000);\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', rectifiedMin);\n      timeSlider.setAttribute('max', dataRangeMax);\n      timeRangeOnSlider.set({\n        min: +calculateValFromRectified(rectifiedMin),\n        max: +calculateValFromRectified(dataRangeMax),\n      });\n      canLoadMore = true;\n    } else if (dataRangeMax >= rectifiedMax && dataRangeMin >= rectifiedMin) {\n      /**\n       *\n       *    -------------------\n       *                ---------\n       */\n      // console.log('right');\n      let leftPercentage = (dataRangeMin - rectifiedMin) / (rectifiedRange * 86400 * 1000);\n      let middlePercentage = (rectifiedMax - dataRangeMin) / (rectifiedRange * 86400 * 1000);\n      let rightPercentage = 0;\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', dataRangeMin);\n      timeSlider.setAttribute('max', rectifiedMax);\n      timeRangeOnSlider.set({\n        min: +calculateValFromRectified(dataRangeMin),\n        max: +calculateValFromRectified(rectifiedMax),\n      });\n      canLoadMore = false;\n    } else if (dataRangeMax >= rectifiedMax && dataRangeMin <= rectifiedMin) {\n      /**\n       *\n       *    -------------------\n       *  -----------------------\n       */\n      // console.log('out');\n      let leftPercentage = 0;\n      let middlePercentage = 1;\n      let rightPercentage = 0;\n      timeSliderPaddingLeft.setAttribute('style', `width: ${Math.round(leftPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('style', `width: ${Math.round(middlePercentage * sliderTotalLength) + 'px'}`);\n      timeSliderPaddingRight.setAttribute('style', `width: ${Math.round(rightPercentage * sliderTotalLength) + 'px'}`);\n      timeSlider.setAttribute('min', rectifiedMin);\n      timeSlider.setAttribute('max', rectifiedMax);\n      timeRangeOnSlider.set({\n        min: +calculateValFromRectified(rectifiedMin),\n        max: +calculateValFromRectified(rectifiedMax),\n      });\n      canLoadMore = true;\n    }\n  }\n\n  function sliderOnChange() {\n    window.performance.mark('start sliderOnChange');\n    // only update currentDataReadyOnMap when the date actually changed\n    currentDate.update(d => {\n      let newDate = calculateValFromRectified(rectifiedVal);\n      if (d !== newDate) {\n        currentDataReadyOnMap.set(false);\n      }\n      return newDate;\n    });\n    window.performance.measure('sliderOnChange', 'start sliderOnChange');\n  }\n\n  function loadMoreDataRange() {\n    rectifiedRange += interval;\n    rectifiedMin = rectifiedMax - rectifiedRange * 86400 * 1000;\n    if (rectifiedMin < dataRangeMin) {\n      rectifiedMin = dataRangeMin;\n      rectifiedRange = (rectifiedMax - rectifiedMin) / (86400 * 1000);\n    }\n    updateSliderUI();\n  }\n\n  currentSensor.subscribe(_ => cancelPlay());\n  currentLevel.subscribe(_ => cancelPlay());\n  signalType.subscribe(_ => cancelPlay());\n\n  function playTime() {\n    if (!playInterval) {\n      let maxDateOnSlider = +timeSlider.getAttribute('max');\n      if (rectifiedVal >= maxDateOnSlider) return;\n      playInterval = setInterval(_ => {\n        if (rectifiedVal < maxDateOnSlider) {\n          rectifiedVal += 86400 * 1000;\n          sliderOnChange();\n        } else {\n          cancelPlay();\n        }\n      }, 2000);\n    } else {\n      cancelPlay();\n    }\n  }\n\n  function cancelPlay() {\n    clearInterval(playInterval);\n    playInterval = null;\n  }\n</script>\n\n<style>\n  .time {\n    display: inline-flex;\n    align-items: center;\n    width: 100%;\n    position: relative;\n  }\n\n  #time-label {\n    font-family: 'Open Sans', sans-serif;\n    line-height: 1rem;\n    font-size: 16px;\n    font-weight: 400;\n  }\n\n  .selected-date {\n    position: absolute;\n    top: -20px;\n    left: 10px;\n    height: 24px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .load-more-button {\n    position: absolute;\n    bottom: -18px;\n    left: 10px;\n    margin: 0;\n    font-size: 0.7rem;\n    background-color: #fff;\n    color: #666666;\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: calc(0.3rem - 1px);\n    padding-left: 0.5rem;\n    padding-right: 0.5rem;\n    padding-top: calc(0.3rem - 1px);\n    transition: all 0.1s ease-in;\n\n    /* rounded design refresh */\n    border-style: solid;\n    border-color: #dbdbdb;\n    border-width: 1px;\n    border-radius: 4px;\n  }\n\n  .load-more-button:hover {\n    background-color: #666666;\n    color: #fff;\n  }\n\n  .load-more-button:focus {\n    outline: none;\n  }\n\n  .load-more-button:disabled {\n    background-color: rgb(211, 211, 211);\n    color: #666666;\n    cursor: not-allowed;\n    font-size: 0.7rem;\n    transform: none;\n  }\n\n  @keyframes shake {\n    10%,\n    90% {\n      transform: translate3d(-1px, 0, 0);\n    }\n\n    20%,\n    80% {\n      transform: translate3d(2px, 0, 0);\n    }\n\n    30%,\n    50%,\n    70% {\n      transform: translate3d(-4px, 0, 0);\n    }\n\n    40%,\n    60% {\n      transform: translate3d(4px, 0, 0);\n    }\n  }\n\n  .time p {\n    flex-shrink: 0;\n    margin-left: 10px;\n    margin-right: 10px;\n    color: var(--grey);\n  }\n\n  .time p.min-max {\n    font-family: 'Open Sans', sans-serif;\n    font-size: 0.8rem;\n    color: #666;\n  }\n\n  #timeSliderPaddingLeft,\n  #timeSliderPaddingRight {\n    height: 6px;\n    padding: 0;\n    border-style: none;\n    background: repeating-linear-gradient(-45deg, #666, #666 2px, #eee 2px, #eee 4px);\n    outline: none;\n    opacity: 0.7;\n  }\n\n  #timeSliderPaddingLeft {\n    position: relative;\n  }\n\n  .slider {\n    -webkit-appearance: none;\n    width: 320px;\n    height: 6px;\n    padding: 0;\n    border: none;\n    background: #d3d3d3;\n    outline: none;\n    opacity: 0.9;\n    margin: 0;\n  }\n\n  .slider::-moz-focus-outer {\n    border: 0;\n  }\n\n  input[type='range'].slider::-ms-track {\n    width: 320px;\n    height: 6px;\n    cursor: pointer;\n\n    /* Hides the slider so custom styles can be added */\n    background: transparent;\n    border-color: transparent;\n    color: transparent;\n  }\n\n  .slider::-ms-tooltip {\n    display: none;\n  }\n\n  .slider::-ms-fill-lower {\n    background: #d3d3d3;\n  }\n\n  .slider:focus::-ms-fill-lower {\n    background: #d3d3d3;\n  }\n\n  .slider::-ms-fill-upper {\n    background: #d3d3d3;\n  }\n\n  .slider:focus::-ms-fill-upper {\n    background: #d3d3d3;\n  }\n\n  /* Special styling for WebKit/Blink */\n  .slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: var(--red);\n    cursor: pointer;\n  }\n\n  /* All the same stuff for Firefox */\n  .slider::-moz-range-thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: var(--red);\n    cursor: pointer;\n  }\n\n  /* All the same stuff for IE */\n  .slider::-ms-thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background: #c00;\n    cursor: pointer;\n  }\n\n  .loader-container {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .loader {\n    border: 4px solid #f3f3f3;\n    border-radius: 50%;\n    border-top: 4px solid #c41230;\n    width: 20px;\n    height: 20px;\n    -webkit-animation: spin 1s linear infinite; /* Safari */\n    animation: spin 1s linear infinite;\n  }\n\n  button.play-button-container-button {\n    background: transparent;\n    padding: 0;\n    margin: 0;\n    border: 0;\n    margin-right: 10px;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .play-button {\n    width: 30px;\n    cursor: pointer;\n  }\n\n  /* Safari */\n  @-webkit-keyframes spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n</style>\n\n<div aria-label=\"date\" class=\"time\">\n  <div aria-live=\"assertive\" id=\"time-label\" class=\"selected-date\" bind:this={selectedDateDisplay}>\n    Estimates for {weekday[new Date(rectifiedVal).getDay()] + ', ' + formatTimeWithoutYear(new Date(rectifiedVal))}\n  </div>\n\n  <button class=\"load-more-button\" on:click={loadMoreDataRange} disabled={!canLoadMore}>Load up to 2 more weeks</button>\n\n  <p aria-label=\"minimum value\" class=\"min-max\">{formatTime(new Date(rectifiedMin))}</p>\n  <div id=\"timeSliderPaddingLeft\" bind:this={timeSliderPaddingLeft} />\n  <input\n    aria-controls=\"time-label\"\n    id=\"time_slider\"\n    bind:this={timeSlider}\n    type=\"range\"\n    min={0}\n    max={0}\n    step={86400000}\n    aria-label={formatTimeWithoutYear(new Date(rectifiedVal))}\n    on:mouseup={sliderOnChange}\n    on:touchend={sliderOnChange}\n    on:keyup={sliderOnChange}\n    class=\"slider\"\n    bind:value={rectifiedVal} />\n  <div id=\"timeSliderPaddingRight\" bind:this={timeSliderPaddingRight} />\n  <p aria-label=\"maximum value\" class=\"min-max\">{formatTime(new Date(rectifiedMax))} (Yesterday)</p>\n\n  <button\n    aria-pressed={playInterval ? 'true' : 'false'}\n    class=\"play-button-container-button\"\n    on:click={_ => playTime()}>\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      class=\"play-button\"\n      viewBox=\"0 0 200 200\"\n      alt=\"play\"\n      fill={playInterval ? '#c00' : '#666'}\n      stroke={playInterval ? '#c00' : '#666'}>\n      <circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\" stroke-width=\"15\" />\n      {#if playInterval}\n        <rect x=\"65\" y=\"52\" width=\"20\" height=\"90\" />\n        <rect x=\"115\" y=\"52\" width=\"20\" height=\"90\" />\n      {:else}\n        <polygon points=\"70, 55 70, 145 145, 100\" />\n      {/if}\n    </svg>\n  </button>\n\n  {#if !$currentDataReadyOnMap}\n    <div class=\"loader-container\">\n      <div class=\"loader\" />\n    </div>\n  {/if}\n\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}