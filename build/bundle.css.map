{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../MapBox.svelte",
    "../../Options.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, setContext } from \"svelte\";\n  import { levels, selectedRegion, geojsons, currentLevel } from \"./stores.js\";\n  import mapboxgl from \"mapbox-gl\";\n  import * as d3 from \"d3\";\n\n  // https://docs.mapbox.com/help/glossary/access-token/\n  mapboxgl.accessToken =\n    \"pk.eyJ1IjoiYW5kcmV3a3V6bmV0c292IiwiYSI6ImNrOHYwYmEwdzA3bWgzbnE1aGR5d2p1OXcifQ.sSs1i6cqPbX1UOSLsDHD6A\";\n\n  const LAT = 37;\n  const LON = -95;\n  const ZOOM = 3.5;\n\n  let container;\n  let map;\n\n  // If the map has been initizlied and the currentLevel changed, update the map.\n  currentLevel.subscribe(_ => updateMap());\n  function updateMap() {\n    if (!map) return;\n    $levels.forEach(l => map.setLayoutProperty(l, \"visibility\", \"none\"));\n    map.setLayoutProperty($currentLevel, \"visibility\", \"visible\");\n  }\n\n  // If map isn't initialized and geojsons have been loaded, draw layers.\n  $: if (!map && $geojsons.size !== 0) initializeMap();\n\n  function initializeMap() {\n    map = new mapboxgl.Map({\n      container,\n      style: \"mapbox://styles/mapbox/streets-v9\",\n      center: [LON, LAT],\n      zoom: ZOOM\n    });\n\n    // Time filtering snippet once we get data\n    // map.setFilter('collisions', ['==', ['number', ['get', 'Hour']], hour]);\n    // We can also update the data: map.getSource('trace').setData(data);\n\n    map.on(\"load\", function() {\n      $levels.forEach(name => {\n        let data = $geojsons.get(name);\n        data.features.forEach(d => (d.properties.val = Math.random()));\n        map.addSource(name, {\n          type: \"geojson\",\n          data: data\n        });\n        map.addLayer({\n          id: name,\n          source: name,\n          type: \"fill\",\n          layout: { visibility: \"none\" },\n          paint: {\n            \"fill-color\": {\n              property: \"val\",\n              stops: [[0, \"#fff\"], [1, \"#f00\"]]\n            },\n            \"fill-opacity\": [\n              \"case\",\n              [\"boolean\", [\"feature-state\", \"hover\"], false],\n              1,\n              0.5\n            ]\n          }\n        });\n        map.on(\"click\", name, function(e) {\n          selectedRegion.set(e.features[0].properties.NAME);\n          new mapboxgl.Popup()\n            .setLngLat(e.lngLat)\n            .setHTML(e.features[0].properties.NAME)\n            .addTo(map);\n        });\n      });\n      // Set all layers to not visible and currentLevel visible.\n      updateMap();\n    });\n  }\n</script>\n\n<style>\n  div {\n    width: 100%;\n    height: 600px;\n  }\n</style>\n\n<div bind:this={container} />\n",
    "<script>\n  import { sensors, currentSensor, levels, currentLevel } from \"./stores.js\";\n</script>\n\n<style>\n  .pure-u-1 {\n    box-sizing: border-box;\n    padding: 5px;\n  }\n</style>\n\n<div class=\"options\">\n  <form class=\"pure-form\">\n    <div class=\"pure-g\">\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"sensor\">Select sensor:</label>\n        <select id=\"sensor\" bind:value={$currentSensor}>\n          {#each $sensors as sensor}\n            <option value={sensor}>{sensor}</option>\n          {/each}\n        </select>\n      </div>\n\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"level\">Select level:</label>\n        <select id=\"level\" bind:value={$currentLevel}>\n          {#each $levels as level}\n            <option value={level}>{level}</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n  </form>\n</div>\n\n<!-- keeping this button-based implementation in case the dropdown implementation above is not what we want -->\n\n<!-- <div class=\"options-group\">\n  <h6>Select sensor:</h6>\n  <div class=\"pure-button-group\">\n    {#each $sensors as sensor}\n      <button\n        class=\"pure-button {$currentSensor === sensor ? 'pure-button-active' : ''}\"\n        on:click={_ => currentSensor.set(sensor)}>\n        {sensor}\n      </button>\n    {/each}\n  </div>\n</div>\n<div class=\"options-group\">\n  <h6>Select level:</h6>\n  <div class=\"pure-button-group\">\n    {#each $levels as level}\n      <button\n        class=\"pure-button {$currentLevel === level ? 'pure-button-active' : ''}\"\n        on:click={_ => currentLevel.set(level)}>\n        {level}\n      </button>\n    {/each}\n  </div>\n</div> -->\n"
  ],
  "names": [],
  "mappings": "AAiFE,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC;AC/ED,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,GAAG,AACd,CAAC"
}