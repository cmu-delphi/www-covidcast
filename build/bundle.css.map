{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../MapBox.svelte",
    "../../Options.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import mapboxgl from \"mapbox-gl\";\n  import {\n    levels,\n    selectedRegion,\n    geojsons,\n    currentLevel,\n    currentSensor,\n    currentData,\n    data\n  } from \"./stores.js\";\n\n  const LAT = 1.07;\n  const LON = 0.25;\n  const ZOOM = 3.9;\n\n  let container;\n  let map;\n\n  // Boolean tracking if the map has been initialized.\n  let mounted = false;\n\n  // If it hasn't been initialized and we have geojsons and initial data, create map.\n  $: if (!map && $geojsons.size !== 0 && $currentData.length !== 0)\n    initializeMap();\n\n  // Update the map when sensor or level changes.\n  currentLevel.subscribe(_ => updateMap());\n  currentSensor.subscribe(_ => updateMap());\n  currentData.subscribe(_ => updateMap());\n\n  function updateMap() {\n    if (!mounted) return;\n    Object.keys($levels).forEach(l =>\n      map.setLayoutProperty(l, \"visibility\", \"none\")\n    );\n    map.setLayoutProperty($currentLevel, \"visibility\", \"visible\");\n\n    // TODO: Can currently only draw for county.\n    if ($currentLevel === \"county\") {\n      let mappedVals = new Map();\n      let geoIds = new Set(\n        $currentData.map(d => {\n          mappedVals.set(d.geo_id.slice(-5), d.direction);\n          return d.geo_id.slice(-5);\n        })\n      );\n\n      let dat = $geojsons.get($currentLevel);\n      dat.features.forEach(d => {\n        let id = d.properties.GEO_ID.slice(-5);\n        if (geoIds.has(id)) {\n          d.properties.val = mappedVals.get(id);\n        } else {\n          d.properties.val = -100;\n        }\n      });\n\n      map.getSource($currentLevel).setData(dat);\n    }\n  }\n\n  function initializeMap() {\n    map = new mapboxgl.Map({\n      attributionControl: false,\n      container,\n      style: \"./maps/mapbox_albers_usa_style.json\",\n      center: [LON, LAT],\n      zoom: ZOOM,\n      minZoom: ZOOM,\n      maxBounds: new mapboxgl.LngLatBounds([-23.25, -14.54], [21.8, 13.4])\n    })\n      .addControl(\n        new mapboxgl.AttributionControl({\n          compact: true\n        })\n      )\n      .addControl(\n        new mapboxgl.NavigationControl({ showCompass: false }),\n        \"top-right\"\n      );\n\n    map.on(\"load\", function() {\n      map.addSource(\"county-outline\", {\n        type: \"geojson\",\n        data: $geojsons.get(\"county\")\n      });\n      map.addSource(\"state-outline\", {\n        type: \"geojson\",\n        data: $geojsons.get(\"state\")\n      });\n      map.addLayer({\n        id: \"state-outline\",\n        source: \"state-outline\",\n        type: \"fill\",\n        paint: {\n          \"fill-color\": \"#f9f9f9\",\n          \"fill-outline-color\": \"#e3e3e3\"\n        }\n      });\n      map.addLayer({\n        id: \"county-outline\",\n        source: \"county-outline\",\n        type: \"fill\",\n        paint: {\n          \"fill-color\": \"#f9f9f9\",\n          \"fill-outline-color\": \"#e0e0e0\"\n        }\n      });\n      Object.keys($levels).forEach(name => {\n        let data = $geojsons.get(name);\n        map.addSource(name, {\n          type: \"geojson\",\n          data: data\n        });\n        map.addLayer({\n          id: name,\n          source: name,\n          type: \"fill\",\n          layout: { visibility: \"none\" },\n          filter: [\"!=\", \"val\", -100],\n          paint: {\n            \"fill-color\": {\n              property: \"val\",\n              stops: [[-1, \"#224477\"], [0, \"#fff\"], [1, \"#c41230\"]]\n            },\n            \"fill-outline-color\": \"black\"\n          }\n        });\n        map.on(\"click\", name, function(e) {\n          selectedRegion.set(e.features[0].properties.GEO_ID);\n          console.log(e.features[0].properties);\n          new mapboxgl.Popup()\n            .setLngLat(e.lngLat)\n            .setHTML(\n              e.features[0].properties.NAME +\n                \"<br />\" +\n                e.features[0].properties.val\n            )\n            .addTo(map);\n        });\n      });\n\n      // disable map zoom when using scroll\n      map.scrollZoom.disable();\n\n      // Set all layers to not visible and currentLevel visible.\n      mounted = true;\n      updateMap();\n    });\n  }\n</script>\n\n<style>\n  div {\n    width: 100%;\n    height: 600px;\n  }\n</style>\n\n<div bind:this={container} />\n",
    "<script>\n  import { sensors, currentSensor, levels, currentLevel } from \"./stores.js\";\n</script>\n\n<style>\n  .pure-u-1 {\n    box-sizing: border-box;\n    padding: 5px;\n  }\n</style>\n\n<div class=\"options\">\n  <form class=\"pure-form\">\n    <div class=\"pure-g\">\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"sensor\">Select sensor:</label>\n        <select id=\"sensor\" bind:value={$currentSensor}>\n          {#each $sensors as sensor}\n            <option value={sensor.id}>{sensor.name}</option>\n          {/each}\n        </select>\n      </div>\n\n      <div class=\"pure-u-1 pure-u-md-1-2\">\n        <label for=\"level\">Select level:</label>\n        <select id=\"level\" bind:value={$currentLevel}>\n          {#each $sensors.find(d => d.id === $currentSensor).levels as level}\n            <option value={level}>{$levels[level]}</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n  </form>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA0JE,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC;ACxJD,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,GAAG,AACd,CAAC"
}